/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing WebhooksTargetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhooksTargetsApiTests : IDisposable
    {
        private WebhooksTargetsApi instance;

        public WebhooksTargetsApiTests()
        {
            instance = new WebhooksTargetsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhooksTargetsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WebhooksTargetsApi
            //Assert.IsType<WebhooksTargetsApi>(instance);
        }

        /// <summary>
        /// Test CreateWebhooksTarget
        /// </summary>
        [Fact]
        public void CreateWebhooksTargetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhooksTargetDto webhooksTargetDto = null;
            //var response = instance.CreateWebhooksTarget(webhooksTargetDto);
            //Assert.IsType<WebhooksTargetDto>(response);
        }

        /// <summary>
        /// Test DeleteWebhooksTarget
        /// </summary>
        [Fact]
        public void DeleteWebhooksTargetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DeleteWebhooksTarget(id);
            //Assert.IsType<WebhooksTargetDto>(response);
        }

        /// <summary>
        /// Test FindWebhooksTargets
        /// </summary>
        [Fact]
        public void FindWebhooksTargetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindWebhooksTargets(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchWebhooksTargetsResultDto>(response);
        }

        /// <summary>
        /// Test GetWebhooksTargetById
        /// </summary>
        [Fact]
        public void GetWebhooksTargetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetWebhooksTargetById(id);
            //Assert.IsType<WebhooksTargetDto>(response);
        }

        /// <summary>
        /// Test TestWebhookTarget
        /// </summary>
        [Fact]
        public void TestWebhookTargetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.TestWebhookTarget(id);
            //Assert.IsType<WebhookTargetTestResultDto>(response);
        }

        /// <summary>
        /// Test UpdateWebhooksTarget
        /// </summary>
        [Fact]
        public void UpdateWebhooksTargetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhooksTargetDto webhooksTargetDto = null;
            //var response = instance.UpdateWebhooksTarget(webhooksTargetDto);
            //Assert.IsType<WebhooksTargetDto>(response);
        }
    }
}
