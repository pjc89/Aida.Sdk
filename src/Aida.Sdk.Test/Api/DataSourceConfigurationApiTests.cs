/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing DataSourceConfigurationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataSourceConfigurationApiTests : IDisposable
    {
        private DataSourceConfigurationApi instance;

        public DataSourceConfigurationApiTests()
        {
            instance = new DataSourceConfigurationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataSourceConfigurationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataSourceConfigurationApi
            //Assert.IsType<DataSourceConfigurationApi>(instance);
        }

        /// <summary>
        /// Test AddDataSourceConfiguration
        /// </summary>
        [Fact]
        public void AddDataSourceConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDataSourceDto createDataSourceDto = null;
            //var response = instance.AddDataSourceConfiguration(createDataSourceDto);
            //Assert.IsType<AddDataSourceConfiguration200Response>(response);
        }

        /// <summary>
        /// Test DeleteDataSourceConfiguration
        /// </summary>
        [Fact]
        public void DeleteDataSourceConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteDataSourceConfiguration(id);
        }

        /// <summary>
        /// Test FindDataSourceConfigurations
        /// </summary>
        [Fact]
        public void FindDataSourceConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindDataSourceConfigurations(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchDataSourceConfigurationResultDto>(response);
        }

        /// <summary>
        /// Test UpdateMysqlDataSourceConfiguration
        /// </summary>
        [Fact]
        public void UpdateMysqlDataSourceConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MySqlDataSourceConfigurationDto mySqlDataSourceConfigurationDto = null;
            //var response = instance.UpdateMysqlDataSourceConfiguration(mySqlDataSourceConfigurationDto);
            //Assert.IsType<MySqlDataSourceConfigurationDto>(response);
        }

        /// <summary>
        /// Test UpdateNpgSqlDataSourceConfiguration
        /// </summary>
        [Fact]
        public void UpdateNpgSqlDataSourceConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NpgSqlDataSourceConfigurationDto npgSqlDataSourceConfigurationDto = null;
            //var response = instance.UpdateNpgSqlDataSourceConfiguration(npgSqlDataSourceConfigurationDto);
            //Assert.IsType<NpgSqlDataSourceConfigurationDto>(response);
        }
    }
}
