/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing EtlApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EtlApiTests : IDisposable
    {
        private EtlApi instance;

        public EtlApiTests()
        {
            instance = new EtlApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EtlApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EtlApi
            //Assert.IsType<EtlApi>(instance);
        }

        /// <summary>
        /// Test AidaV1EtlJobIdGetDataExchangeTableDdlGet
        /// </summary>
        [Fact]
        public void AidaV1EtlJobIdGetDataExchangeTableDdlGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.AidaV1EtlJobIdGetDataExchangeTableDdlGet(jobId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test CreateDataExchangeTable
        /// </summary>
        [Fact]
        public void CreateDataExchangeTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.CreateDataExchangeTable(jobId);
            //Assert.IsType<AddDataSourceConfiguration200Response>(response);
        }

        /// <summary>
        /// Test DataSourceConfigurationIsValid
        /// </summary>
        [Fact]
        public void DataSourceConfigurationIsValidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.DataSourceConfigurationIsValid(jobId);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test GenerateDataSource
        /// </summary>
        [Fact]
        public void GenerateDataSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.GenerateDataSource(jobId);
            //Assert.IsType<AddDataSourceConfiguration200Response>(response);
        }

        /// <summary>
        /// Test GenerateMockDataset
        /// </summary>
        [Fact]
        public void GenerateMockDatasetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //List<DataRecord> dataRecord = null;
            //instance.GenerateMockDataset(jobId, dataRecord);
        }

        /// <summary>
        /// Test GetDataBindings
        /// </summary>
        [Fact]
        public void GetDataBindingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.GetDataBindings(jobId);
            //Assert.IsType<Dictionary<string, List<DataBindingDto>>>(response);
        }

        /// <summary>
        /// Test GetDataExchangeTableDefinition
        /// </summary>
        [Fact]
        public void GetDataExchangeTableDefinitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.GetDataExchangeTableDefinition(jobId);
            //Assert.IsType<DataExchangeTableDefinition>(response);
        }

        /// <summary>
        /// Test GetEntityDescriptorsByJobTemplateId
        /// </summary>
        [Fact]
        public void GetEntityDescriptorsByJobTemplateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //var response = instance.GetEntityDescriptorsByJobTemplateId(jobId);
            //Assert.IsType<List<EntityDescriptor>>(response);
        }
    }
}
