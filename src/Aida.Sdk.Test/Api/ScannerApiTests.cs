/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Aida.Sdk.Client;
using Aida.Sdk.Api;
// uncomment below to import models
//using Aida.Sdk.Model;

namespace Aida.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing ScannerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ScannerApiTests : IDisposable
    {
        private ScannerApi instance;

        public ScannerApiTests()
        {
            instance = new ScannerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ScannerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ScannerApi
            //Assert.IsType<ScannerApi>(instance);
        }

        /// <summary>
        /// Test AddJobTemplateLayoutAutoPosSettings
        /// </summary>
        [Fact]
        public void AddJobTemplateLayoutAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobTemplateId = null;
            //int layoutId = null;
            //string scannerId = null;
            //CreateJobTemplateLayoutAutoPosSettingsDto createJobTemplateLayoutAutoPosSettingsDto = null;
            //var response = instance.AddJobTemplateLayoutAutoPosSettings(jobTemplateId, layoutId, scannerId, createJobTemplateLayoutAutoPosSettingsDto);
            //Assert.IsType<JobTemplateLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test AddMarkGroup
        /// </summary>
        [Fact]
        public void AddMarkGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //MarkGroup markGroup = null;
            //var response = instance.AddMarkGroup(id, scannerId, markGroup);
            //Assert.IsType<JobTemplateDto>(response);
        }

        /// <summary>
        /// Test AidaV1ScannerJobTemplatesIdChipEncodingSettingsPost
        /// </summary>
        [Fact]
        public void AidaV1ScannerJobTemplatesIdChipEncodingSettingsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //ChipEncodingConfigurationDto chipEncodingConfigurationDto = null;
            //var response = instance.AidaV1ScannerJobTemplatesIdChipEncodingSettingsPost(id, chipEncodingConfigurationDto);
            //Assert.IsType<ChipEncodingConfigurationDto>(response);
        }

        /// <summary>
        /// Test AidaV1ScannerLayoutsImportValidateGet
        /// </summary>
        [Fact]
        public void AidaV1ScannerLayoutsImportValidateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layoutName = null;
            //string filename = null;
            //instance.AidaV1ScannerLayoutsImportValidateGet(layoutName, filename);
        }

        /// <summary>
        /// Test AlignEntities
        /// </summary>
        [Fact]
        public void AlignEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //AlignEntitiesDto alignEntitiesDto = null;
            //var response = instance.AlignEntities(scannerId, alignEntitiesDto);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test AssignLayoutToJobTemplate
        /// </summary>
        [Fact]
        public void AssignLayoutToJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobTemplateId = null;
            //string supportSide = null;
            //int layoutId = null;
            //int? index = null;
            //instance.AssignLayoutToJobTemplate(jobTemplateId, supportSide, layoutId, index);
        }

        /// <summary>
        /// Test AssignLayoutsToJobTemplate
        /// </summary>
        [Fact]
        public void AssignLayoutsToJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<JobTemplateLayoutDto> jobTemplateLayoutDto = null;
            //instance.AssignLayoutsToJobTemplate(id, jobTemplateLayoutDto);
        }

        /// <summary>
        /// Test AssignWebHookTarget
        /// </summary>
        [Fact]
        public void AssignWebHookTargetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //WebhooksTargetDto webhooksTargetDto = null;
            //instance.AssignWebHookTarget(id, webhooksTargetDto);
        }

        /// <summary>
        /// Test CenterEntities
        /// </summary>
        [Fact]
        public void CenterEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //CenterEntitiesDto centerEntitiesDto = null;
            //var response = instance.CenterEntities(scannerId, centerEntitiesDto);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test CenterEntitiesHorizontal
        /// </summary>
        [Fact]
        public void CenterEntitiesHorizontalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //CenterEntitiesDto centerEntitiesDto = null;
            //var response = instance.CenterEntitiesHorizontal(scannerId, centerEntitiesDto);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test CenterEntitiesVertical
        /// </summary>
        [Fact]
        public void CenterEntitiesVerticalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //CenterEntitiesDto centerEntitiesDto = null;
            //var response = instance.CenterEntitiesVertical(scannerId, centerEntitiesDto);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test Clear
        /// </summary>
        [Fact]
        public void ClearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.Clear(scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test ComputeMarkGroups
        /// </summary>
        [Fact]
        public void ComputeMarkGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.ComputeMarkGroups(id, scannerId);
            //Assert.IsType<List<TaskDescriptor>>(response);
        }

        /// <summary>
        /// Test ComputeMarkGroupsWithStrategy
        /// </summary>
        [Fact]
        public void ComputeMarkGroupsWithStrategyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? jobId = null;
            //int? supportId = null;
            //string strategy = null;
            //var response = instance.ComputeMarkGroupsWithStrategy(jobId, supportId, strategy);
            //Assert.IsType<List<MarkGroupSummaryModel>>(response);
        }

        /// <summary>
        /// Test Connect
        /// </summary>
        [Fact]
        public void ConnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.Connect(scannerId);
        }

        /// <summary>
        /// Test CreateCameraSettings
        /// </summary>
        [Fact]
        public void CreateCameraSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string cameraId = null;
            //CameraSettingsDto cameraSettingsDto = null;
            //var response = instance.CreateCameraSettings(scannerId, cameraId, cameraSettingsDto);
            //Assert.IsType<CameraSettingsDto>(response);
        }

        /// <summary>
        /// Test CreateJobTemplate
        /// </summary>
        [Fact]
        public void CreateJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //CreateJobTemplateDto createJobTemplateDto = null;
            //var response = instance.CreateJobTemplate(scannerId, createJobTemplateDto);
            //Assert.IsType<JobTemplateDto>(response);
        }

        /// <summary>
        /// Test CreateJobTemplateOcrSettings
        /// </summary>
        [Fact]
        public void CreateJobTemplateOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobTemplateOcrSettingsDto jobTemplateOcrSettingsDto = null;
            //var response = instance.CreateJobTemplateOcrSettings(jobTemplateOcrSettingsDto);
            //Assert.IsType<JobTemplateOcrSettingsDto>(response);
        }

        /// <summary>
        /// Test CreateOcrSettings
        /// </summary>
        [Fact]
        public void CreateOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OcrSettingsDto ocrSettingsDto = null;
            //var response = instance.CreateOcrSettings(ocrSettingsDto);
            //Assert.IsType<OcrSettingsDto>(response);
        }

        /// <summary>
        /// Test DeleteJobTemplate
        /// </summary>
        [Fact]
        public void DeleteJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //instance.DeleteJobTemplate(id, scannerId);
        }

        /// <summary>
        /// Test DeleteJobTemplateOcrSettings
        /// </summary>
        [Fact]
        public void DeleteJobTemplateOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobTemplateOcrSettingsId = null;
            //var response = instance.DeleteJobTemplateOcrSettings(jobTemplateOcrSettingsId);
            //Assert.IsType<JobTemplateOcrSettingsDto>(response);
        }

        /// <summary>
        /// Test DeleteLayout
        /// </summary>
        [Fact]
        public void DeleteLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //instance.DeleteLayout(id, scannerId);
        }

        /// <summary>
        /// Test DeleteOcrSettings
        /// </summary>
        [Fact]
        public void DeleteOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int ocrSettingsId = null;
            //var response = instance.DeleteOcrSettings(ocrSettingsId);
            //Assert.IsType<OcrSettingsDto>(response);
        }

        /// <summary>
        /// Test DisableDebugMode
        /// </summary>
        [Fact]
        public void DisableDebugModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.DisableDebugMode(scannerId);
        }

        /// <summary>
        /// Test DisableIllumination
        /// </summary>
        [Fact]
        public void DisableIlluminationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.DisableIllumination(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test DisableLaserPen
        /// </summary>
        [Fact]
        public void DisableLaserPenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.DisableLaserPen(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test DisableRedPointer
        /// </summary>
        [Fact]
        public void DisableRedPointerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.DisableRedPointer(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test DownloadScannerConfig
        /// </summary>
        [Fact]
        public void DownloadScannerConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DownloadScannerConfig();
        }

        /// <summary>
        /// Test DownloadSettingsFile
        /// </summary>
        [Fact]
        public void DownloadSettingsFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.DownloadSettingsFile(scannerId);
        }

        /// <summary>
        /// Test EnableDebugMode
        /// </summary>
        [Fact]
        public void EnableDebugModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.EnableDebugMode(scannerId);
        }

        /// <summary>
        /// Test EnableIllumination
        /// </summary>
        [Fact]
        public void EnableIlluminationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.EnableIllumination(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test EnableLaserPen
        /// </summary>
        [Fact]
        public void EnableLaserPenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.EnableLaserPen(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test EnableRedPointer
        /// </summary>
        [Fact]
        public void EnableRedPointerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.EnableRedPointer(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test ExportPenSet
        /// </summary>
        [Fact]
        public void ExportPenSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ExportPenSet();
        }

        /// <summary>
        /// Test ExportScannerConfig
        /// </summary>
        [Fact]
        public void ExportScannerConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ExportScannerConfig();
        }

        /// <summary>
        /// Test FindJobTemplateLayoutAutoPosSettings
        /// </summary>
        [Fact]
        public void FindJobTemplateLayoutAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindJobTemplateLayoutAutoPosSettings(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchJobTemplateLayoutAutoPosSettingsDto>(response);
        }

        /// <summary>
        /// Test FindJobTemplates
        /// </summary>
        [Fact]
        public void FindJobTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //bool? includeLayouts = null;
            //bool? includeFile = null;
            //bool? includeEntities = null;
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindJobTemplates(scannerId, includeLayouts, includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchJobTemplatesResultDto>(response);
        }

        /// <summary>
        /// Test FindJobs
        /// </summary>
        [Fact]
        public void FindJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //int? page = null;
            //int? pageSize = null;
            //JobStatus? status = null;
            //var response = instance.FindJobs(id, scannerId, page, pageSize, status);
            //Assert.IsType<SearchJobsResultDto>(response);
        }

        /// <summary>
        /// Test FindLayouts
        /// </summary>
        [Fact]
        public void FindLayoutsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //bool? includeFile = null;
            //bool? includeEntities = null;
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindLayouts(scannerId, includeFile, includeEntities, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchLayoutsResultDto>(response);
        }

        /// <summary>
        /// Test FindOcrSettings
        /// </summary>
        [Fact]
        public void FindOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.FindOcrSettings(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<SearchOcrSettingsResultDto>(response);
        }

        /// <summary>
        /// Test GetAssignableLayoutsByJobTemplateId
        /// </summary>
        [Fact]
        public void GetAssignableLayoutsByJobTemplateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //int? pageSize = null;
            //string supportSide = null;
            //var response = instance.GetAssignableLayoutsByJobTemplateId(id, page, pageSize, supportSide);
            //Assert.IsType<SearchLayoutsResultDto>(response);
        }

        /// <summary>
        /// Test GetAssignedLayoutsByJobTemplateId
        /// </summary>
        [Fact]
        public void GetAssignedLayoutsByJobTemplateIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.GetAssignedLayoutsByJobTemplateId(id, page, pageSize);
            //Assert.IsType<SearchJobLayoutsResultDto>(response);
        }

        /// <summary>
        /// Test GetAutoPosSettings
        /// </summary>
        [Fact]
        public void GetAutoPosSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobTemplateId = null;
            //int layoutId = null;
            //var response = instance.GetAutoPosSettings(jobTemplateId, layoutId);
            //Assert.IsType<List<TemplateMatchingConfigurationDto>>(response);
        }

        /// <summary>
        /// Test GetCameraInfo
        /// </summary>
        [Fact]
        public void GetCameraInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cameraId = null;
            //string scannerId = null;
            //instance.GetCameraInfo(cameraId, scannerId);
        }

        /// <summary>
        /// Test GetCameraPresetByName
        /// </summary>
        [Fact]
        public void GetCameraPresetByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string presetName = null;
            //string scannerId = null;
            //string cameraId = null;
            //var response = instance.GetCameraPresetByName(presetName, scannerId, cameraId);
            //Assert.IsType<CameraSettingsDto>(response);
        }

        /// <summary>
        /// Test GetCameraPresetsList
        /// </summary>
        [Fact]
        public void GetCameraPresetsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cameraId = null;
            //string scannerId = null;
            //var response = instance.GetCameraPresetsList(cameraId, scannerId);
            //Assert.IsType<List<CameraSettingsDto>>(response);
        }

        /// <summary>
        /// Test GetCurrentJobFilename
        /// </summary>
        [Fact]
        public void GetCurrentJobFilenameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.GetCurrentJobFilename(scannerId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test GetCurrentPenSet
        /// </summary>
        [Fact]
        public void GetCurrentPenSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //int? page = null;
            //int? pageSize = null;
            //string query = null;
            //string sortCriteriaPropertyName = null;
            //SortDirection? sortCriteriaDirection = null;
            //var response = instance.GetCurrentPenSet(scannerId, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            //Assert.IsType<List<PenDto>>(response);
        }

        /// <summary>
        /// Test GetHomographySettings
        /// </summary>
        [Fact]
        public void GetHomographySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cameraId = null;
            //string scannerId = null;
            //var response = instance.GetHomographySettings(cameraId, scannerId);
            //Assert.IsType<HomographySettingsDto>(response);
        }

        /// <summary>
        /// Test GetJobTemplateById
        /// </summary>
        [Fact]
        public void GetJobTemplateByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.GetJobTemplateById(id, scannerId);
            //Assert.IsType<JobTemplateDto>(response);
        }

        /// <summary>
        /// Test GetLaserBoardState
        /// </summary>
        [Fact]
        public void GetLaserBoardStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.GetLaserBoardState(scannerId);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test GetLaserPen
        /// </summary>
        [Fact]
        public void GetLaserPenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.GetLaserPen(id, scannerId);
            //Assert.IsType<PenDto>(response);
        }

        /// <summary>
        /// Test GetLayoutById
        /// </summary>
        [Fact]
        public void GetLayoutByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.GetLayoutById(id, scannerId);
            //Assert.IsType<LayoutDto>(response);
        }

        /// <summary>
        /// Test GetLayoutStoreSettings
        /// </summary>
        [Fact]
        public void GetLayoutStoreSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.GetLayoutStoreSettings(scannerId);
            //Assert.IsType<LayoutStoreSettings>(response);
        }

        /// <summary>
        /// Test GetPixelMapForPen
        /// </summary>
        [Fact]
        public void GetPixelMapForPenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.GetPixelMapForPen(id, scannerId);
            //Assert.IsType<PixelMapDto>(response);
        }

        /// <summary>
        /// Test GetPreview
        /// </summary>
        [Fact]
        public void GetPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.GetPreview(scannerId);
        }

        /// <summary>
        /// Test GetSnapshot
        /// </summary>
        [Fact]
        public void GetSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string randomName = null;
            //string format = null;
            //string scannerId = null;
            //string cameraId = null;
            //int? width = null;
            //int? height = null;
            //bool? warpPerspective = null;
            //string presetName = null;
            //var response = instance.GetSnapshot(randomName, format, scannerId, cameraId, width, height, warpPerspective, presetName);
            //Assert.IsType<Stream>(response);
        }

        /// <summary>
        /// Test GetSnapshotImage
        /// </summary>
        [Fact]
        public void GetSnapshotImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string randomName = null;
            //string format = null;
            //string scannerId = null;
            //string cameraId = null;
            //int? width = null;
            //int? height = null;
            //bool? warpPerspective = null;
            //string presetName = null;
            //var response = instance.GetSnapshotImage(randomName, format, scannerId, cameraId, width, height, warpPerspective, presetName);
            //Assert.IsType<Stream>(response);
        }

        /// <summary>
        /// Test GetState
        /// </summary>
        [Fact]
        public void GetStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.GetState(scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test GetSupportedOcrLanguages
        /// </summary>
        [Fact]
        public void GetSupportedOcrLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.GetSupportedOcrLanguages(scannerId);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test GetSystemPixelMap
        /// </summary>
        [Fact]
        public void GetSystemPixelMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.GetSystemPixelMap(scannerId);
            //Assert.IsType<PixelMapDto>(response);
        }

        /// <summary>
        /// Test GetUndistortedImage
        /// </summary>
        [Fact]
        public void GetUndistortedImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string cameraId = null;
            //var response = instance.GetUndistortedImage(scannerId, cameraId);
            //Assert.IsType<FileParameter>(response);
        }

        /// <summary>
        /// Test ImportLayoutFile
        /// </summary>
        [Fact]
        public void ImportLayoutFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string layoutName = null;
            //string filename = null;
            //var response = instance.ImportLayoutFile(scannerId, layoutName, filename);
            //Assert.IsType<LayoutDto>(response);
        }

        /// <summary>
        /// Test ImportPenSet
        /// </summary>
        [Fact]
        public void ImportPenSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //List<FileParameter> files = null;
            //var response = instance.ImportPenSet(scannerId, files);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test InitializeAutoPos
        /// </summary>
        [Fact]
        public void InitializeAutoPosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.InitializeAutoPos(id);
            //Assert.IsType<JobTemplateDto>(response);
        }

        /// <summary>
        /// Test IsConnected
        /// </summary>
        [Fact]
        public void IsConnectedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.IsConnected(scannerId);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test ListSjfFiles
        /// </summary>
        [Fact]
        public void ListSjfFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListSjfFiles();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test LiveStream
        /// </summary>
        [Fact]
        public void LiveStreamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string cameraId = null;
            //string preset = null;
            //bool? warpPerspective = null;
            //instance.LiveStream(scannerId, cameraId, preset, warpPerspective);
        }

        /// <summary>
        /// Test LiveStreamPage
        /// </summary>
        [Fact]
        public void LiveStreamPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string preset = null;
            //bool? warpPerspective = null;
            //instance.LiveStreamPage(scannerId, preset, warpPerspective);
        }

        /// <summary>
        /// Test LoadJobData
        /// </summary>
        [Fact]
        public void LoadJobDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobId = null;
            //int supportId = null;
            //string scannerId = null;
            //var response = instance.LoadJobData(jobId, supportId, scannerId);
            //Assert.IsType<Dictionary<string, string>>(response);
        }

        /// <summary>
        /// Test LoadJobInstance
        /// </summary>
        [Fact]
        public void LoadJobInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? jobId = null;
            //int? instanceId = null;
            //string scannerId = null;
            //bool? force = null;
            //var response = instance.LoadJobInstance(jobId, instanceId, scannerId, force);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test LoadJobTemplate
        /// </summary>
        [Fact]
        public void LoadJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //bool? force = null;
            //string scannerId = null;
            //var response = instance.LoadJobTemplate(id, force, scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test LoadJobTemplateLayout
        /// </summary>
        [Fact]
        public void LoadJobTemplateLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? jobId = null;
            //int? layoutId = null;
            //var response = instance.LoadJobTemplateLayout(jobId, layoutId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test LoadLayout
        /// </summary>
        [Fact]
        public void LoadLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string supportSide = null;
            //string layoutName = null;
            //bool? overwriteEntities = null;
            //bool? loadMaterials = null;
            //string scannerId = null;
            //var response = instance.LoadLayout(supportSide, layoutName, overwriteEntities, loadMaterials, scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test LoadSjfFile
        /// </summary>
        [Fact]
        public void LoadSjfFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string filename = null;
            //var response = instance.LoadSjfFile(scannerId, filename);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test MarkEntities
        /// </summary>
        [Fact]
        public void MarkEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? waitForCompletion = null;
            //string scannerId = null;
            //MarkEntitiesDto markEntitiesDto = null;
            //var response = instance.MarkEntities(waitForCompletion, scannerId, markEntitiesDto);
            //Assert.IsType<MarkEntitiesResult>(response);
        }

        /// <summary>
        /// Test MarkLayout
        /// </summary>
        [Fact]
        public void MarkLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string scannerId = null;
            //instance.MarkLayout(name, scannerId);
        }

        /// <summary>
        /// Test MeasureEntitiesMarkTime
        /// </summary>
        [Fact]
        public void MeasureEntitiesMarkTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.MeasureEntitiesMarkTime(id, scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test MoveAbs
        /// </summary>
        [Fact]
        public void MoveAbsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? x = null;
            //double? y = null;
            //string scannerId = null;
            //instance.MoveAbs(x, y, scannerId);
        }

        /// <summary>
        /// Test MoveTo
        /// </summary>
        [Fact]
        public void MoveToTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //MoveToDto moveToDto = null;
            //var response = instance.MoveTo(scannerId, moveToDto);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test RebuildSjfFile
        /// </summary>
        [Fact]
        public void RebuildSjfFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.RebuildSjfFile(id);
        }

        /// <summary>
        /// Test RemoveLayoutFromJobTemplate
        /// </summary>
        [Fact]
        public void RemoveLayoutFromJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int jobTemplateId = null;
            //int layoutId = null;
            //string supportSide = null;
            //instance.RemoveLayoutFromJobTemplate(jobTemplateId, layoutId, supportSide);
        }

        /// <summary>
        /// Test RemoveMarkGroups
        /// </summary>
        [Fact]
        public void RemoveMarkGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //var response = instance.RemoveMarkGroups(id, scannerId);
            //Assert.IsType<JobTemplateDto>(response);
        }

        /// <summary>
        /// Test RemoveWebhooksTarget
        /// </summary>
        [Fact]
        public void RemoveWebhooksTargetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.RemoveWebhooksTarget(id);
        }

        /// <summary>
        /// Test RenameLayout
        /// </summary>
        [Fact]
        public void RenameLayoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string name = null;
            //var response = instance.RenameLayout(id, name);
            //Assert.IsType<LayoutDto>(response);
        }

        /// <summary>
        /// Test ResetCameraOutputSettings
        /// </summary>
        [Fact]
        public void ResetCameraOutputSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string presetName = null;
            //string scannerId = null;
            //string cameraId = null;
            //var response = instance.ResetCameraOutputSettings(presetName, scannerId, cameraId);
            //Assert.IsType<CameraSettingsDto>(response);
        }

        /// <summary>
        /// Test RotateEntities
        /// </summary>
        [Fact]
        public void RotateEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //RotateEntitiesDto rotateEntitiesDto = null;
            //instance.RotateEntities(scannerId, rotateEntitiesDto);
        }

        /// <summary>
        /// Test RunBarcodeReader
        /// </summary>
        [Fact]
        public void RunBarcodeReaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string cameraId = null;
            //BarcodeParamsDto barcodeParamsDto = null;
            //var response = instance.RunBarcodeReader(scannerId, cameraId, barcodeParamsDto);
            //Assert.IsType<BarcodeReadResultDto>(response);
        }

        /// <summary>
        /// Test RunOcr
        /// </summary>
        [Fact]
        public void RunOcrTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string cameraId = null;
            //OcrSettingsDto ocrSettingsDto = null;
            //var response = instance.RunOcr(scannerId, cameraId, ocrSettingsDto);
            //Assert.IsType<OcrResultDto>(response);
        }

        /// <summary>
        /// Test SaveHomographySettings
        /// </summary>
        [Fact]
        public void SaveHomographySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cameraId = null;
            //string scannerId = null;
            //HomographySettingsDto homographySettingsDto = null;
            //var response = instance.SaveHomographySettings(cameraId, scannerId, homographySettingsDto);
            //Assert.IsType<HomographySettingsDto>(response);
        }

        /// <summary>
        /// Test SaveJobTemplate
        /// </summary>
        [Fact]
        public void SaveJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.SaveJobTemplate(scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test SaveJobTemplateFile
        /// </summary>
        [Fact]
        public void SaveJobTemplateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string file = null;
            //string scannerId = null;
            //instance.SaveJobTemplateFile(file, scannerId);
        }

        /// <summary>
        /// Test SavePenSet
        /// </summary>
        [Fact]
        public void SavePenSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //bool? resyncMetadata = null;
            //instance.SavePenSet(scannerId, resyncMetadata);
        }

        /// <summary>
        /// Test SaveSettings
        /// </summary>
        [Fact]
        public void SaveSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.SaveSettings(scannerId);
        }

        /// <summary>
        /// Test SelectEntities
        /// </summary>
        [Fact]
        public void SelectEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //SelectEntitiesDto selectEntitiesDto = null;
            //var response = instance.SelectEntities(scannerId, selectEntitiesDto);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test SetEntityPen
        /// </summary>
        [Fact]
        public void SetEntityPenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityId = null;
            //int? penId = null;
            //instance.SetEntityPen(entityId, penId);
        }

        /// <summary>
        /// Test SetParameter
        /// </summary>
        [Fact]
        public void SetParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //var response = instance.SetParameter(offset);
            //Assert.IsType<LaserBoardState>(response);
        }

        /// <summary>
        /// Test SetPixelMapForPen
        /// </summary>
        [Fact]
        public void SetPixelMapForPenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //PixelMapDto pixelMapDto = null;
            //var response = instance.SetPixelMapForPen(id, scannerId, pixelMapDto);
            //Assert.IsType<PixelMapDto>(response);
        }

        /// <summary>
        /// Test ShowApplicationWindow
        /// </summary>
        [Fact]
        public void ShowApplicationWindowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ShowApplicationWindow();
        }

        /// <summary>
        /// Test SimulateMark
        /// </summary>
        [Fact]
        public void SimulateMarkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int cardId = null;
            //string scannerId = null;
            //instance.SimulateMark(id, cardId, scannerId);
        }

        /// <summary>
        /// Test StartRedPointer
        /// </summary>
        [Fact]
        public void StartRedPointerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //StartRedPointerDto startRedPointerDto = null;
            //instance.StartRedPointer(scannerId, startRedPointerDto);
        }

        /// <summary>
        /// Test StopMarking
        /// </summary>
        [Fact]
        public void StopMarkingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //var response = instance.StopMarking(scannerId);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test StopRedPointer
        /// </summary>
        [Fact]
        public void StopRedPointerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //instance.StopRedPointer(scannerId);
        }

        /// <summary>
        /// Test TestSelection
        /// </summary>
        [Fact]
        public void TestSelectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int cardId = null;
            //string scannerId = null;
            //instance.TestSelection(id, cardId, scannerId);
        }

        /// <summary>
        /// Test TranslateEntities
        /// </summary>
        [Fact]
        public void TranslateEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //TranslateEntitiesDto translateEntitiesDto = null;
            //var response = instance.TranslateEntities(scannerId, translateEntitiesDto);
            //Assert.IsType<Translation>(response);
        }

        /// <summary>
        /// Test UpdateCameraSettings
        /// </summary>
        [Fact]
        public void UpdateCameraSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string cameraId = null;
            //CameraSettingsDto cameraSettingsDto = null;
            //var response = instance.UpdateCameraSettings(scannerId, cameraId, cameraSettingsDto);
            //Assert.IsType<CameraSettingsDto>(response);
        }

        /// <summary>
        /// Test UpdateEntities
        /// </summary>
        [Fact]
        public void UpdateEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //List<FileParameter> assets = null;
            //var response = instance.UpdateEntities(scannerId, assets);
            //Assert.IsType<ScannerAppStateDto>(response);
        }

        /// <summary>
        /// Test UpdateEntityProperties
        /// </summary>
        [Fact]
        public void UpdateEntityPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //ScannerEntityDto scannerEntityDto = null;
            //var response = instance.UpdateEntityProperties(scannerId, scannerEntityDto);
            //Assert.IsType<ScannerEntityDto>(response);
        }

        /// <summary>
        /// Test UpdateJobTemplateOcrSettings
        /// </summary>
        [Fact]
        public void UpdateJobTemplateOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobTemplateOcrSettingsDto jobTemplateOcrSettingsDto = null;
            //var response = instance.UpdateJobTemplateOcrSettings(jobTemplateOcrSettingsDto);
            //Assert.IsType<JobTemplateOcrSettingsDto>(response);
        }

        /// <summary>
        /// Test UpdateMarkGroups
        /// </summary>
        [Fact]
        public void UpdateMarkGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //List<ScannerMarkGroupDto> scannerMarkGroupDto = null;
            //var response = instance.UpdateMarkGroups(id, scannerId, scannerMarkGroupDto);
            //Assert.IsType<JobTemplateDto>(response);
        }

        /// <summary>
        /// Test UpdateOcrSettings
        /// </summary>
        [Fact]
        public void UpdateOcrSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OcrSettingsDto ocrSettingsDto = null;
            //var response = instance.UpdateOcrSettings(ocrSettingsDto);
            //Assert.IsType<OcrSettingsDto>(response);
        }

        /// <summary>
        /// Test UpdatePen
        /// </summary>
        [Fact]
        public void UpdatePenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //PenDto penDto = null;
            //var response = instance.UpdatePen(id, scannerId, penDto);
            //Assert.IsType<PenDto>(response);
        }

        /// <summary>
        /// Test UpdateSystemPixelMap
        /// </summary>
        [Fact]
        public void UpdateSystemPixelMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //PixelMapDto pixelMapDto = null;
            //var response = instance.UpdateSystemPixelMap(scannerId, pixelMapDto);
            //Assert.IsType<PixelMapDto>(response);
        }

        /// <summary>
        /// Test UploadLayoutAndAddToJobTemplate
        /// </summary>
        [Fact]
        public void UploadLayoutAndAddToJobTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string scannerId = null;
            //string layoutName = null;
            //string supportSide = null;
            //List<FileParameter> files = null;
            //var response = instance.UploadLayoutAndAddToJobTemplate(id, scannerId, layoutName, supportSide, files);
            //Assert.IsType<LayoutDto>(response);
        }

        /// <summary>
        /// Test UploadLayoutFile
        /// </summary>
        [Fact]
        public void UploadLayoutFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layoutName = null;
            //string supportSide = null;
            //string scannerId = null;
            //List<FileParameter> files = null;
            //var response = instance.UploadLayoutFile(layoutName, supportSide, scannerId, files);
            //Assert.IsType<LayoutDto>(response);
        }

        /// <summary>
        /// Test UploadSettingsFile
        /// </summary>
        [Fact]
        public void UploadSettingsFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //List<FileParameter> settingsFile = null;
            //instance.UploadSettingsFile(scannerId, settingsFile);
        }

        /// <summary>
        /// Test ValidateJobTemplateName
        /// </summary>
        [Fact]
        public void ValidateJobTemplateNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string body = null;
            //var response = instance.ValidateJobTemplateName(scannerId, body);
            //Assert.IsType<NameValidationResultDto>(response);
        }

        /// <summary>
        /// Test ValidateLayoutName
        /// </summary>
        [Fact]
        public void ValidateLayoutNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scannerId = null;
            //string body = null;
            //var response = instance.ValidateLayoutName(scannerId, body);
            //Assert.IsType<NameValidationResultDto>(response);
        }
    }
}
