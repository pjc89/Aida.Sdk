/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// MarkGroup
    /// </summary>
    [DataContract(Name = "MarkGroup")]
    public partial class MarkGroup : IEquatable<MarkGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkGroup" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="scannerId">scannerId.</param>
        /// <param name="positionId">positionId.</param>
        /// <param name="supportSide">supportSide.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="offsetX">offsetX.</param>
        /// <param name="offsetY">offsetY.</param>
        /// <param name="rotationAngle">rotationAngle.</param>
        /// <param name="autoPosSettings">autoPosSettings.</param>
        /// <param name="entities">entities.</param>
        /// <param name="expectedMarkDurationMs">expectedMarkDurationMs.</param>
        /// <param name="measuredMarkDurationMs">measuredMarkDurationMs.</param>
        /// <param name="jobTemplateId">jobTemplateId.</param>
        /// <param name="index">index.</param>
        public MarkGroup(int id = default(int), string name = default(string), string displayName = default(string), string scannerId = default(string), string positionId = default(string), string supportSide = default(string), string deviceId = default(string), double offsetX = default(double), double offsetY = default(double), double rotationAngle = default(double), JobTemplateLayoutAutoPosSettings autoPosSettings = default(JobTemplateLayoutAutoPosSettings), List<MarkGroupScannerEntity> entities = default(List<MarkGroupScannerEntity>), double expectedMarkDurationMs = default(double), double measuredMarkDurationMs = default(double), int jobTemplateId = default(int), int index = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.DisplayName = displayName;
            this.ScannerId = scannerId;
            this.PositionId = positionId;
            this.SupportSide = supportSide;
            this.DeviceId = deviceId;
            this.OffsetX = offsetX;
            this.OffsetY = offsetY;
            this.RotationAngle = rotationAngle;
            this.AutoPosSettings = autoPosSettings;
            this.Entities = entities;
            this.ExpectedMarkDurationMs = expectedMarkDurationMs;
            this.MeasuredMarkDurationMs = measuredMarkDurationMs;
            this.JobTemplateId = jobTemplateId;
            this.Index = index;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ScannerId
        /// </summary>
        [DataMember(Name = "scannerId", EmitDefaultValue = true)]
        public string ScannerId { get; set; }

        /// <summary>
        /// Gets or Sets PositionId
        /// </summary>
        [DataMember(Name = "positionId", EmitDefaultValue = true)]
        public string PositionId { get; set; }

        /// <summary>
        /// Gets or Sets SupportSide
        /// </summary>
        [DataMember(Name = "supportSide", EmitDefaultValue = true)]
        public string SupportSide { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets OffsetX
        /// </summary>
        [DataMember(Name = "offsetX", EmitDefaultValue = false)]
        public double OffsetX { get; set; }

        /// <summary>
        /// Gets or Sets OffsetY
        /// </summary>
        [DataMember(Name = "offsetY", EmitDefaultValue = false)]
        public double OffsetY { get; set; }

        /// <summary>
        /// Gets or Sets RotationAngle
        /// </summary>
        [DataMember(Name = "rotationAngle", EmitDefaultValue = false)]
        public double RotationAngle { get; set; }

        /// <summary>
        /// Gets or Sets AutoPosSettings
        /// </summary>
        [DataMember(Name = "autoPosSettings", EmitDefaultValue = false)]
        public JobTemplateLayoutAutoPosSettings AutoPosSettings { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = true)]
        public List<MarkGroupScannerEntity> Entities { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedMarkDurationMs
        /// </summary>
        [DataMember(Name = "expectedMarkDurationMs", EmitDefaultValue = false)]
        public double ExpectedMarkDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets MeasuredMarkDurationMs
        /// </summary>
        [DataMember(Name = "measuredMarkDurationMs", EmitDefaultValue = false)]
        public double MeasuredMarkDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets JobTemplateId
        /// </summary>
        [DataMember(Name = "jobTemplateId", EmitDefaultValue = false)]
        public int JobTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarkGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ScannerId: ").Append(ScannerId).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  SupportSide: ").Append(SupportSide).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  OffsetX: ").Append(OffsetX).Append("\n");
            sb.Append("  OffsetY: ").Append(OffsetY).Append("\n");
            sb.Append("  RotationAngle: ").Append(RotationAngle).Append("\n");
            sb.Append("  AutoPosSettings: ").Append(AutoPosSettings).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  ExpectedMarkDurationMs: ").Append(ExpectedMarkDurationMs).Append("\n");
            sb.Append("  MeasuredMarkDurationMs: ").Append(MeasuredMarkDurationMs).Append("\n");
            sb.Append("  JobTemplateId: ").Append(JobTemplateId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkGroup);
        }

        /// <summary>
        /// Returns true if MarkGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ScannerId == input.ScannerId ||
                    (this.ScannerId != null &&
                    this.ScannerId.Equals(input.ScannerId))
                ) && 
                (
                    this.PositionId == input.PositionId ||
                    (this.PositionId != null &&
                    this.PositionId.Equals(input.PositionId))
                ) && 
                (
                    this.SupportSide == input.SupportSide ||
                    (this.SupportSide != null &&
                    this.SupportSide.Equals(input.SupportSide))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.OffsetX == input.OffsetX ||
                    this.OffsetX.Equals(input.OffsetX)
                ) && 
                (
                    this.OffsetY == input.OffsetY ||
                    this.OffsetY.Equals(input.OffsetY)
                ) && 
                (
                    this.RotationAngle == input.RotationAngle ||
                    this.RotationAngle.Equals(input.RotationAngle)
                ) && 
                (
                    this.AutoPosSettings == input.AutoPosSettings ||
                    (this.AutoPosSettings != null &&
                    this.AutoPosSettings.Equals(input.AutoPosSettings))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.ExpectedMarkDurationMs == input.ExpectedMarkDurationMs ||
                    this.ExpectedMarkDurationMs.Equals(input.ExpectedMarkDurationMs)
                ) && 
                (
                    this.MeasuredMarkDurationMs == input.MeasuredMarkDurationMs ||
                    this.MeasuredMarkDurationMs.Equals(input.MeasuredMarkDurationMs)
                ) && 
                (
                    this.JobTemplateId == input.JobTemplateId ||
                    this.JobTemplateId.Equals(input.JobTemplateId)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.ScannerId != null)
                {
                    hashCode = (hashCode * 59) + this.ScannerId.GetHashCode();
                }
                if (this.PositionId != null)
                {
                    hashCode = (hashCode * 59) + this.PositionId.GetHashCode();
                }
                if (this.SupportSide != null)
                {
                    hashCode = (hashCode * 59) + this.SupportSide.GetHashCode();
                }
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OffsetX.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetY.GetHashCode();
                hashCode = (hashCode * 59) + this.RotationAngle.GetHashCode();
                if (this.AutoPosSettings != null)
                {
                    hashCode = (hashCode * 59) + this.AutoPosSettings.GetHashCode();
                }
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpectedMarkDurationMs.GetHashCode();
                hashCode = (hashCode * 59) + this.MeasuredMarkDurationMs.GetHashCode();
                hashCode = (hashCode * 59) + this.JobTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
