/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// PenFlagsDto
    /// </summary>
    [DataContract(Name = "PenFlagsDto")]
    public partial class PenFlagsDto : IEquatable<PenFlagsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PenFlagsDto" /> class.
        /// </summary>
        /// <param name="enableLongDelay">enableLongDelay.</param>
        /// <param name="enablePowerControl">enablePowerControl.</param>
        /// <param name="enableWobble">enableWobble.</param>
        /// <param name="enablePort1">enablePort1.</param>
        /// <param name="enableSkyWriting">enableSkyWriting.</param>
        /// <param name="applyPowerChangesAfterJumps">applyPowerChangesAfterJumps.</param>
        /// <param name="enableDrill">enableDrill.</param>
        /// <param name="useGeometry">useGeometry.</param>
        /// <param name="enablePixelHardwareMode">enablePixelHardwareMode.</param>
        /// <param name="enablePixelMap">enablePixelMap.</param>
        /// <param name="enableUseVectorDelays">enableUseVectorDelays.</param>
        /// <param name="enableYagStandBy">enableYagStandBy.</param>
        /// <param name="enableDa1">enableDa1.</param>
        /// <param name="enableDa2">enableDa2.</param>
        /// <param name="enablePointPowerMap">enablePointPowerMap.</param>
        /// <param name="enableUsePenPowerAsMaxPower">enableUsePenPowerAsMaxPower.</param>
        public PenFlagsDto(bool? enableLongDelay = default(bool?), bool? enablePowerControl = default(bool?), bool? enableWobble = default(bool?), bool? enablePort1 = default(bool?), bool? enableSkyWriting = default(bool?), bool? applyPowerChangesAfterJumps = default(bool?), bool? enableDrill = default(bool?), bool? useGeometry = default(bool?), bool? enablePixelHardwareMode = default(bool?), bool? enablePixelMap = default(bool?), bool? enableUseVectorDelays = default(bool?), bool? enableYagStandBy = default(bool?), bool? enableDa1 = default(bool?), bool? enableDa2 = default(bool?), bool? enablePointPowerMap = default(bool?), bool? enableUsePenPowerAsMaxPower = default(bool?))
        {
            this.EnableLongDelay = enableLongDelay;
            this.EnablePowerControl = enablePowerControl;
            this.EnableWobble = enableWobble;
            this.EnablePort1 = enablePort1;
            this.EnableSkyWriting = enableSkyWriting;
            this.ApplyPowerChangesAfterJumps = applyPowerChangesAfterJumps;
            this.EnableDrill = enableDrill;
            this.UseGeometry = useGeometry;
            this.EnablePixelHardwareMode = enablePixelHardwareMode;
            this.EnablePixelMap = enablePixelMap;
            this.EnableUseVectorDelays = enableUseVectorDelays;
            this.EnableYagStandBy = enableYagStandBy;
            this.EnableDa1 = enableDa1;
            this.EnableDa2 = enableDa2;
            this.EnablePointPowerMap = enablePointPowerMap;
            this.EnableUsePenPowerAsMaxPower = enableUsePenPowerAsMaxPower;
        }

        /// <summary>
        /// Gets or Sets EnableLongDelay
        /// </summary>
        [DataMember(Name = "enableLongDelay", EmitDefaultValue = true)]
        public bool? EnableLongDelay { get; set; }

        /// <summary>
        /// Gets or Sets EnablePowerControl
        /// </summary>
        [DataMember(Name = "enablePowerControl", EmitDefaultValue = true)]
        public bool? EnablePowerControl { get; set; }

        /// <summary>
        /// Gets or Sets EnableWobble
        /// </summary>
        [DataMember(Name = "enableWobble", EmitDefaultValue = true)]
        public bool? EnableWobble { get; set; }

        /// <summary>
        /// Gets or Sets EnablePort1
        /// </summary>
        [DataMember(Name = "enablePort1", EmitDefaultValue = true)]
        public bool? EnablePort1 { get; set; }

        /// <summary>
        /// Gets or Sets EnableSkyWriting
        /// </summary>
        [DataMember(Name = "enableSkyWriting", EmitDefaultValue = true)]
        public bool? EnableSkyWriting { get; set; }

        /// <summary>
        /// Gets or Sets ApplyPowerChangesAfterJumps
        /// </summary>
        [DataMember(Name = "applyPowerChangesAfterJumps", EmitDefaultValue = true)]
        public bool? ApplyPowerChangesAfterJumps { get; set; }

        /// <summary>
        /// Gets or Sets EnableDrill
        /// </summary>
        [DataMember(Name = "enableDrill", EmitDefaultValue = true)]
        public bool? EnableDrill { get; set; }

        /// <summary>
        /// Gets or Sets UseGeometry
        /// </summary>
        [DataMember(Name = "useGeometry", EmitDefaultValue = true)]
        public bool? UseGeometry { get; set; }

        /// <summary>
        /// Gets or Sets EnablePixelHardwareMode
        /// </summary>
        [DataMember(Name = "enablePixelHardwareMode", EmitDefaultValue = true)]
        public bool? EnablePixelHardwareMode { get; set; }

        /// <summary>
        /// Gets or Sets EnablePixelMap
        /// </summary>
        [DataMember(Name = "enablePixelMap", EmitDefaultValue = true)]
        public bool? EnablePixelMap { get; set; }

        /// <summary>
        /// Gets or Sets EnableUseVectorDelays
        /// </summary>
        [DataMember(Name = "enableUseVectorDelays", EmitDefaultValue = true)]
        public bool? EnableUseVectorDelays { get; set; }

        /// <summary>
        /// Gets or Sets EnableYagStandBy
        /// </summary>
        [DataMember(Name = "enableYagStandBy", EmitDefaultValue = true)]
        public bool? EnableYagStandBy { get; set; }

        /// <summary>
        /// Gets or Sets EnableDa1
        /// </summary>
        [DataMember(Name = "enableDa1", EmitDefaultValue = true)]
        public bool? EnableDa1 { get; set; }

        /// <summary>
        /// Gets or Sets EnableDa2
        /// </summary>
        [DataMember(Name = "enableDa2", EmitDefaultValue = true)]
        public bool? EnableDa2 { get; set; }

        /// <summary>
        /// Gets or Sets EnablePointPowerMap
        /// </summary>
        [DataMember(Name = "enablePointPowerMap", EmitDefaultValue = true)]
        public bool? EnablePointPowerMap { get; set; }

        /// <summary>
        /// Gets or Sets EnableUsePenPowerAsMaxPower
        /// </summary>
        [DataMember(Name = "enableUsePenPowerAsMaxPower", EmitDefaultValue = true)]
        public bool? EnableUsePenPowerAsMaxPower { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PenFlagsDto {\n");
            sb.Append("  EnableLongDelay: ").Append(EnableLongDelay).Append("\n");
            sb.Append("  EnablePowerControl: ").Append(EnablePowerControl).Append("\n");
            sb.Append("  EnableWobble: ").Append(EnableWobble).Append("\n");
            sb.Append("  EnablePort1: ").Append(EnablePort1).Append("\n");
            sb.Append("  EnableSkyWriting: ").Append(EnableSkyWriting).Append("\n");
            sb.Append("  ApplyPowerChangesAfterJumps: ").Append(ApplyPowerChangesAfterJumps).Append("\n");
            sb.Append("  EnableDrill: ").Append(EnableDrill).Append("\n");
            sb.Append("  UseGeometry: ").Append(UseGeometry).Append("\n");
            sb.Append("  EnablePixelHardwareMode: ").Append(EnablePixelHardwareMode).Append("\n");
            sb.Append("  EnablePixelMap: ").Append(EnablePixelMap).Append("\n");
            sb.Append("  EnableUseVectorDelays: ").Append(EnableUseVectorDelays).Append("\n");
            sb.Append("  EnableYagStandBy: ").Append(EnableYagStandBy).Append("\n");
            sb.Append("  EnableDa1: ").Append(EnableDa1).Append("\n");
            sb.Append("  EnableDa2: ").Append(EnableDa2).Append("\n");
            sb.Append("  EnablePointPowerMap: ").Append(EnablePointPowerMap).Append("\n");
            sb.Append("  EnableUsePenPowerAsMaxPower: ").Append(EnableUsePenPowerAsMaxPower).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PenFlagsDto);
        }

        /// <summary>
        /// Returns true if PenFlagsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PenFlagsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PenFlagsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnableLongDelay == input.EnableLongDelay ||
                    (this.EnableLongDelay != null &&
                    this.EnableLongDelay.Equals(input.EnableLongDelay))
                ) && 
                (
                    this.EnablePowerControl == input.EnablePowerControl ||
                    (this.EnablePowerControl != null &&
                    this.EnablePowerControl.Equals(input.EnablePowerControl))
                ) && 
                (
                    this.EnableWobble == input.EnableWobble ||
                    (this.EnableWobble != null &&
                    this.EnableWobble.Equals(input.EnableWobble))
                ) && 
                (
                    this.EnablePort1 == input.EnablePort1 ||
                    (this.EnablePort1 != null &&
                    this.EnablePort1.Equals(input.EnablePort1))
                ) && 
                (
                    this.EnableSkyWriting == input.EnableSkyWriting ||
                    (this.EnableSkyWriting != null &&
                    this.EnableSkyWriting.Equals(input.EnableSkyWriting))
                ) && 
                (
                    this.ApplyPowerChangesAfterJumps == input.ApplyPowerChangesAfterJumps ||
                    (this.ApplyPowerChangesAfterJumps != null &&
                    this.ApplyPowerChangesAfterJumps.Equals(input.ApplyPowerChangesAfterJumps))
                ) && 
                (
                    this.EnableDrill == input.EnableDrill ||
                    (this.EnableDrill != null &&
                    this.EnableDrill.Equals(input.EnableDrill))
                ) && 
                (
                    this.UseGeometry == input.UseGeometry ||
                    (this.UseGeometry != null &&
                    this.UseGeometry.Equals(input.UseGeometry))
                ) && 
                (
                    this.EnablePixelHardwareMode == input.EnablePixelHardwareMode ||
                    (this.EnablePixelHardwareMode != null &&
                    this.EnablePixelHardwareMode.Equals(input.EnablePixelHardwareMode))
                ) && 
                (
                    this.EnablePixelMap == input.EnablePixelMap ||
                    (this.EnablePixelMap != null &&
                    this.EnablePixelMap.Equals(input.EnablePixelMap))
                ) && 
                (
                    this.EnableUseVectorDelays == input.EnableUseVectorDelays ||
                    (this.EnableUseVectorDelays != null &&
                    this.EnableUseVectorDelays.Equals(input.EnableUseVectorDelays))
                ) && 
                (
                    this.EnableYagStandBy == input.EnableYagStandBy ||
                    (this.EnableYagStandBy != null &&
                    this.EnableYagStandBy.Equals(input.EnableYagStandBy))
                ) && 
                (
                    this.EnableDa1 == input.EnableDa1 ||
                    (this.EnableDa1 != null &&
                    this.EnableDa1.Equals(input.EnableDa1))
                ) && 
                (
                    this.EnableDa2 == input.EnableDa2 ||
                    (this.EnableDa2 != null &&
                    this.EnableDa2.Equals(input.EnableDa2))
                ) && 
                (
                    this.EnablePointPowerMap == input.EnablePointPowerMap ||
                    (this.EnablePointPowerMap != null &&
                    this.EnablePointPowerMap.Equals(input.EnablePointPowerMap))
                ) && 
                (
                    this.EnableUsePenPowerAsMaxPower == input.EnableUsePenPowerAsMaxPower ||
                    (this.EnableUsePenPowerAsMaxPower != null &&
                    this.EnableUsePenPowerAsMaxPower.Equals(input.EnableUsePenPowerAsMaxPower))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableLongDelay != null)
                {
                    hashCode = (hashCode * 59) + this.EnableLongDelay.GetHashCode();
                }
                if (this.EnablePowerControl != null)
                {
                    hashCode = (hashCode * 59) + this.EnablePowerControl.GetHashCode();
                }
                if (this.EnableWobble != null)
                {
                    hashCode = (hashCode * 59) + this.EnableWobble.GetHashCode();
                }
                if (this.EnablePort1 != null)
                {
                    hashCode = (hashCode * 59) + this.EnablePort1.GetHashCode();
                }
                if (this.EnableSkyWriting != null)
                {
                    hashCode = (hashCode * 59) + this.EnableSkyWriting.GetHashCode();
                }
                if (this.ApplyPowerChangesAfterJumps != null)
                {
                    hashCode = (hashCode * 59) + this.ApplyPowerChangesAfterJumps.GetHashCode();
                }
                if (this.EnableDrill != null)
                {
                    hashCode = (hashCode * 59) + this.EnableDrill.GetHashCode();
                }
                if (this.UseGeometry != null)
                {
                    hashCode = (hashCode * 59) + this.UseGeometry.GetHashCode();
                }
                if (this.EnablePixelHardwareMode != null)
                {
                    hashCode = (hashCode * 59) + this.EnablePixelHardwareMode.GetHashCode();
                }
                if (this.EnablePixelMap != null)
                {
                    hashCode = (hashCode * 59) + this.EnablePixelMap.GetHashCode();
                }
                if (this.EnableUseVectorDelays != null)
                {
                    hashCode = (hashCode * 59) + this.EnableUseVectorDelays.GetHashCode();
                }
                if (this.EnableYagStandBy != null)
                {
                    hashCode = (hashCode * 59) + this.EnableYagStandBy.GetHashCode();
                }
                if (this.EnableDa1 != null)
                {
                    hashCode = (hashCode * 59) + this.EnableDa1.GetHashCode();
                }
                if (this.EnableDa2 != null)
                {
                    hashCode = (hashCode * 59) + this.EnableDa2.GetHashCode();
                }
                if (this.EnablePointPowerMap != null)
                {
                    hashCode = (hashCode * 59) + this.EnablePointPowerMap.GetHashCode();
                }
                if (this.EnableUsePenPowerAsMaxPower != null)
                {
                    hashCode = (hashCode * 59) + this.EnableUsePenPowerAsMaxPower.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
