/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// TransportPositionDto
    /// </summary>
    [DataContract(Name = "TransportPositionDto")]
    public partial class TransportPositionDto : IEquatable<TransportPositionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportPositionDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="moduleId">moduleId.</param>
        /// <param name="positionName">positionName.</param>
        /// <param name="isMachineExit">isMachineExit.</param>
        /// <param name="isMachineInput">isMachineInput.</param>
        /// <param name="isTransient">isTransient.</param>
        /// <param name="isReject">isReject.</param>
        /// <param name="isFeeder">isFeeder.</param>
        /// <param name="isAlias">isAlias.</param>
        /// <param name="label">label.</param>
        /// <param name="name">name.</param>
        /// <param name="occupied">occupied.</param>
        /// <param name="realPosition">realPosition.</param>
        /// <param name="currentSupport">currentSupport.</param>
        /// <param name="connections">connections.</param>
        public TransportPositionDto(string id = default(string), int moduleId = default(int), string positionName = default(string), bool isMachineExit = default(bool), bool isMachineInput = default(bool), bool isTransient = default(bool), bool isReject = default(bool), bool isFeeder = default(bool), bool isAlias = default(bool), string label = default(string), string name = default(string), bool occupied = default(bool), string realPosition = default(string), SupportDto currentSupport = default(SupportDto), List<string> connections = default(List<string>))
        {
            this.Id = id;
            this.ModuleId = moduleId;
            this.PositionName = positionName;
            this.IsMachineExit = isMachineExit;
            this.IsMachineInput = isMachineInput;
            this.IsTransient = isTransient;
            this.IsReject = isReject;
            this.IsFeeder = isFeeder;
            this.IsAlias = isAlias;
            this.Label = label;
            this.Name = name;
            this.Occupied = occupied;
            this.RealPosition = realPosition;
            this.CurrentSupport = currentSupport;
            this.Connections = connections;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ModuleId
        /// </summary>
        [DataMember(Name = "moduleId", EmitDefaultValue = false)]
        public int ModuleId { get; set; }

        /// <summary>
        /// Gets or Sets PositionName
        /// </summary>
        [DataMember(Name = "positionName", EmitDefaultValue = true)]
        public string PositionName { get; set; }

        /// <summary>
        /// Gets or Sets IsMachineExit
        /// </summary>
        [DataMember(Name = "isMachineExit", EmitDefaultValue = true)]
        public bool IsMachineExit { get; set; }

        /// <summary>
        /// Gets or Sets IsMachineInput
        /// </summary>
        [DataMember(Name = "isMachineInput", EmitDefaultValue = true)]
        public bool IsMachineInput { get; set; }

        /// <summary>
        /// Gets or Sets IsTransient
        /// </summary>
        [DataMember(Name = "isTransient", EmitDefaultValue = true)]
        public bool IsTransient { get; set; }

        /// <summary>
        /// Gets or Sets IsReject
        /// </summary>
        [DataMember(Name = "isReject", EmitDefaultValue = true)]
        public bool IsReject { get; set; }

        /// <summary>
        /// Gets or Sets IsFeeder
        /// </summary>
        [DataMember(Name = "isFeeder", EmitDefaultValue = true)]
        public bool IsFeeder { get; set; }

        /// <summary>
        /// Gets or Sets IsAlias
        /// </summary>
        [DataMember(Name = "isAlias", EmitDefaultValue = true)]
        public bool IsAlias { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Occupied
        /// </summary>
        [DataMember(Name = "occupied", EmitDefaultValue = true)]
        public bool Occupied { get; set; }

        /// <summary>
        /// Gets or Sets RealPosition
        /// </summary>
        [DataMember(Name = "realPosition", EmitDefaultValue = true)]
        public string RealPosition { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSupport
        /// </summary>
        [DataMember(Name = "currentSupport", EmitDefaultValue = false)]
        public SupportDto CurrentSupport { get; set; }

        /// <summary>
        /// Gets or Sets Connections
        /// </summary>
        [DataMember(Name = "connections", EmitDefaultValue = true)]
        public List<string> Connections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportPositionDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModuleId: ").Append(ModuleId).Append("\n");
            sb.Append("  PositionName: ").Append(PositionName).Append("\n");
            sb.Append("  IsMachineExit: ").Append(IsMachineExit).Append("\n");
            sb.Append("  IsMachineInput: ").Append(IsMachineInput).Append("\n");
            sb.Append("  IsTransient: ").Append(IsTransient).Append("\n");
            sb.Append("  IsReject: ").Append(IsReject).Append("\n");
            sb.Append("  IsFeeder: ").Append(IsFeeder).Append("\n");
            sb.Append("  IsAlias: ").Append(IsAlias).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Occupied: ").Append(Occupied).Append("\n");
            sb.Append("  RealPosition: ").Append(RealPosition).Append("\n");
            sb.Append("  CurrentSupport: ").Append(CurrentSupport).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportPositionDto);
        }

        /// <summary>
        /// Returns true if TransportPositionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportPositionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportPositionDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ModuleId == input.ModuleId ||
                    this.ModuleId.Equals(input.ModuleId)
                ) && 
                (
                    this.PositionName == input.PositionName ||
                    (this.PositionName != null &&
                    this.PositionName.Equals(input.PositionName))
                ) && 
                (
                    this.IsMachineExit == input.IsMachineExit ||
                    this.IsMachineExit.Equals(input.IsMachineExit)
                ) && 
                (
                    this.IsMachineInput == input.IsMachineInput ||
                    this.IsMachineInput.Equals(input.IsMachineInput)
                ) && 
                (
                    this.IsTransient == input.IsTransient ||
                    this.IsTransient.Equals(input.IsTransient)
                ) && 
                (
                    this.IsReject == input.IsReject ||
                    this.IsReject.Equals(input.IsReject)
                ) && 
                (
                    this.IsFeeder == input.IsFeeder ||
                    this.IsFeeder.Equals(input.IsFeeder)
                ) && 
                (
                    this.IsAlias == input.IsAlias ||
                    this.IsAlias.Equals(input.IsAlias)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Occupied == input.Occupied ||
                    this.Occupied.Equals(input.Occupied)
                ) && 
                (
                    this.RealPosition == input.RealPosition ||
                    (this.RealPosition != null &&
                    this.RealPosition.Equals(input.RealPosition))
                ) && 
                (
                    this.CurrentSupport == input.CurrentSupport ||
                    (this.CurrentSupport != null &&
                    this.CurrentSupport.Equals(input.CurrentSupport))
                ) && 
                (
                    this.Connections == input.Connections ||
                    this.Connections != null &&
                    input.Connections != null &&
                    this.Connections.SequenceEqual(input.Connections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModuleId.GetHashCode();
                if (this.PositionName != null)
                {
                    hashCode = (hashCode * 59) + this.PositionName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMachineExit.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMachineInput.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTransient.GetHashCode();
                hashCode = (hashCode * 59) + this.IsReject.GetHashCode();
                hashCode = (hashCode * 59) + this.IsFeeder.GetHashCode();
                hashCode = (hashCode * 59) + this.IsAlias.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Occupied.GetHashCode();
                if (this.RealPosition != null)
                {
                    hashCode = (hashCode * 59) + this.RealPosition.GetHashCode();
                }
                if (this.CurrentSupport != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentSupport.GetHashCode();
                }
                if (this.Connections != null)
                {
                    hashCode = (hashCode * 59) + this.Connections.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
