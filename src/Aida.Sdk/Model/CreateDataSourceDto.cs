/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// CreateDataSourceDto
    /// </summary>
    [DataContract(Name = "CreateDataSourceDto")]
    public partial class CreateDataSourceDto : IEquatable<CreateDataSourceDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataSourceType
        /// </summary>
        [DataMember(Name = "dataSourceType", EmitDefaultValue = false)]
        public DataSourceType? DataSourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDataSourceDto" /> class.
        /// </summary>
        /// <param name="dataSourceType">dataSourceType.</param>
        /// <param name="name">name.</param>
        /// <param name="tableName">tableName.</param>
        /// <param name="description">description.</param>
        /// <param name="queryTemplate">queryTemplate.</param>
        /// <param name="connectionString">connectionString.</param>
        public CreateDataSourceDto(DataSourceType? dataSourceType = default(DataSourceType?), string name = default(string), string tableName = default(string), string description = default(string), string queryTemplate = default(string), string connectionString = default(string))
        {
            this.DataSourceType = dataSourceType;
            this.Name = name;
            this.TableName = tableName;
            this.Description = description;
            this.QueryTemplate = queryTemplate;
            this.ConnectionString = connectionString;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name = "tableName", EmitDefaultValue = true)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets QueryTemplate
        /// </summary>
        [DataMember(Name = "queryTemplate", EmitDefaultValue = true)]
        public string QueryTemplate { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionString
        /// </summary>
        [DataMember(Name = "connectionString", EmitDefaultValue = true)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDataSourceDto {\n");
            sb.Append("  DataSourceType: ").Append(DataSourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  QueryTemplate: ").Append(QueryTemplate).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDataSourceDto);
        }

        /// <summary>
        /// Returns true if CreateDataSourceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDataSourceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDataSourceDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataSourceType == input.DataSourceType ||
                    this.DataSourceType.Equals(input.DataSourceType)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.QueryTemplate == input.QueryTemplate ||
                    (this.QueryTemplate != null &&
                    this.QueryTemplate.Equals(input.QueryTemplate))
                ) && 
                (
                    this.ConnectionString == input.ConnectionString ||
                    (this.ConnectionString != null &&
                    this.ConnectionString.Equals(input.ConnectionString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DataSourceType.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.TableName != null)
                {
                    hashCode = (hashCode * 59) + this.TableName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.QueryTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.QueryTemplate.GetHashCode();
                }
                if (this.ConnectionString != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
