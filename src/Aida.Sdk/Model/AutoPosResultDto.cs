/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// AutoPosResultDto
    /// </summary>
    [DataContract(Name = "AutoPosResultDto")]
    public partial class AutoPosResultDto : IEquatable<AutoPosResultDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AutoPosResultStatusCode? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosResultDto" /> class.
        /// </summary>
        /// <param name="success">success.</param>
        /// <param name="status">status.</param>
        /// <param name="millimetersPerPixelX">millimetersPerPixelX.</param>
        /// <param name="millimetersPerPixelY">millimetersPerPixelY.</param>
        /// <param name="offsetXMillimeters">offsetXMillimeters.</param>
        /// <param name="offsetYMillimeters">offsetYMillimeters.</param>
        public AutoPosResultDto(bool success = default(bool), AutoPosResultStatusCode? status = default(AutoPosResultStatusCode?), double millimetersPerPixelX = default(double), double millimetersPerPixelY = default(double), double offsetXMillimeters = default(double), double offsetYMillimeters = default(double))
        {
            this.Success = success;
            this.Status = status;
            this.MillimetersPerPixelX = millimetersPerPixelX;
            this.MillimetersPerPixelY = millimetersPerPixelY;
            this.OffsetXMillimeters = offsetXMillimeters;
            this.OffsetYMillimeters = offsetYMillimeters;
        }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets MillimetersPerPixelX
        /// </summary>
        [DataMember(Name = "millimetersPerPixelX", EmitDefaultValue = false)]
        public double MillimetersPerPixelX { get; set; }

        /// <summary>
        /// Gets or Sets MillimetersPerPixelY
        /// </summary>
        [DataMember(Name = "millimetersPerPixelY", EmitDefaultValue = false)]
        public double MillimetersPerPixelY { get; set; }

        /// <summary>
        /// Gets or Sets OffsetXMillimeters
        /// </summary>
        [DataMember(Name = "offsetXMillimeters", EmitDefaultValue = false)]
        public double OffsetXMillimeters { get; set; }

        /// <summary>
        /// Gets or Sets OffsetYMillimeters
        /// </summary>
        [DataMember(Name = "offsetYMillimeters", EmitDefaultValue = false)]
        public double OffsetYMillimeters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutoPosResultDto {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MillimetersPerPixelX: ").Append(MillimetersPerPixelX).Append("\n");
            sb.Append("  MillimetersPerPixelY: ").Append(MillimetersPerPixelY).Append("\n");
            sb.Append("  OffsetXMillimeters: ").Append(OffsetXMillimeters).Append("\n");
            sb.Append("  OffsetYMillimeters: ").Append(OffsetYMillimeters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutoPosResultDto);
        }

        /// <summary>
        /// Returns true if AutoPosResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AutoPosResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoPosResultDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.MillimetersPerPixelX == input.MillimetersPerPixelX ||
                    this.MillimetersPerPixelX.Equals(input.MillimetersPerPixelX)
                ) && 
                (
                    this.MillimetersPerPixelY == input.MillimetersPerPixelY ||
                    this.MillimetersPerPixelY.Equals(input.MillimetersPerPixelY)
                ) && 
                (
                    this.OffsetXMillimeters == input.OffsetXMillimeters ||
                    this.OffsetXMillimeters.Equals(input.OffsetXMillimeters)
                ) && 
                (
                    this.OffsetYMillimeters == input.OffsetYMillimeters ||
                    this.OffsetYMillimeters.Equals(input.OffsetYMillimeters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.MillimetersPerPixelX.GetHashCode();
                hashCode = (hashCode * 59) + this.MillimetersPerPixelY.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetXMillimeters.GetHashCode();
                hashCode = (hashCode * 59) + this.OffsetYMillimeters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
