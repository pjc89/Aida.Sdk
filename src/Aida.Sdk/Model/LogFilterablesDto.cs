/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// LogFilterablesDto
    /// </summary>
    [DataContract(Name = "LogFilterablesDto")]
    public partial class LogFilterablesDto : IEquatable<LogFilterablesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogFilterablesDto" /> class.
        /// </summary>
        /// <param name="logLevels">logLevels.</param>
        /// <param name="moduleNames">moduleNames.</param>
        /// <param name="eventTypes">eventTypes.</param>
        public LogFilterablesDto(List<string> logLevels = default(List<string>), List<string> moduleNames = default(List<string>), List<LogEventTypeDto> eventTypes = default(List<LogEventTypeDto>))
        {
            this.LogLevels = logLevels;
            this.ModuleNames = moduleNames;
            this.EventTypes = eventTypes;
        }

        /// <summary>
        /// Gets or Sets LogLevels
        /// </summary>
        [DataMember(Name = "logLevels", EmitDefaultValue = true)]
        public List<string> LogLevels { get; set; }

        /// <summary>
        /// Gets or Sets ModuleNames
        /// </summary>
        [DataMember(Name = "moduleNames", EmitDefaultValue = true)]
        public List<string> ModuleNames { get; set; }

        /// <summary>
        /// Gets or Sets EventTypes
        /// </summary>
        [DataMember(Name = "eventTypes", EmitDefaultValue = true)]
        public List<LogEventTypeDto> EventTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogFilterablesDto {\n");
            sb.Append("  LogLevels: ").Append(LogLevels).Append("\n");
            sb.Append("  ModuleNames: ").Append(ModuleNames).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogFilterablesDto);
        }

        /// <summary>
        /// Returns true if LogFilterablesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LogFilterablesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogFilterablesDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogLevels == input.LogLevels ||
                    this.LogLevels != null &&
                    input.LogLevels != null &&
                    this.LogLevels.SequenceEqual(input.LogLevels)
                ) && 
                (
                    this.ModuleNames == input.ModuleNames ||
                    this.ModuleNames != null &&
                    input.ModuleNames != null &&
                    this.ModuleNames.SequenceEqual(input.ModuleNames)
                ) && 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes != null &&
                    input.EventTypes != null &&
                    this.EventTypes.SequenceEqual(input.EventTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogLevels != null)
                {
                    hashCode = (hashCode * 59) + this.LogLevels.GetHashCode();
                }
                if (this.ModuleNames != null)
                {
                    hashCode = (hashCode * 59) + this.ModuleNames.GetHashCode();
                }
                if (this.EventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
