/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// WorkflowSchedulerStateDto
    /// </summary>
    [DataContract(Name = "WorkflowSchedulerStateDto")]
    public partial class WorkflowSchedulerStateDto : IEquatable<WorkflowSchedulerStateDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public WorkflowSchedulerStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowSchedulerStateDto" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="errors">errors.</param>
        /// <param name="queueSize">queueSize.</param>
        /// <param name="queuedOrderIds">queuedOrderIds.</param>
        /// <param name="errorDetails">errorDetails.</param>
        /// <param name="lastLoadedItemId">lastLoadedItemId.</param>
        /// <param name="upTimeSeconds">upTimeSeconds.</param>
        /// <param name="currentJobTemplate">currentJobTemplate.</param>
        /// <param name="workflowTypeName">workflowTypeName.</param>
        /// <param name="sessionId">sessionId.</param>
        public WorkflowSchedulerStateDto(WorkflowSchedulerStatus? status = default(WorkflowSchedulerStatus?), List<WorkflowSchedulerErrorCodes> errors = default(List<WorkflowSchedulerErrorCodes>), int queueSize = default(int), List<int> queuedOrderIds = default(List<int>), string errorDetails = default(string), int lastLoadedItemId = default(int), int upTimeSeconds = default(int), JobTemplateDto currentJobTemplate = default(JobTemplateDto), string workflowTypeName = default(string), string sessionId = default(string))
        {
            this.Status = status;
            this.Errors = errors;
            this.QueueSize = queueSize;
            this.QueuedOrderIds = queuedOrderIds;
            this.ErrorDetails = errorDetails;
            this.LastLoadedItemId = lastLoadedItemId;
            this.UpTimeSeconds = upTimeSeconds;
            this.CurrentJobTemplate = currentJobTemplate;
            this.WorkflowTypeName = workflowTypeName;
            this.SessionId = sessionId;
        }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public List<WorkflowSchedulerErrorCodes> Errors { get; set; }

        /// <summary>
        /// Gets or Sets QueueSize
        /// </summary>
        [DataMember(Name = "queueSize", EmitDefaultValue = false)]
        public int QueueSize { get; set; }

        /// <summary>
        /// Gets or Sets QueuedOrderIds
        /// </summary>
        [DataMember(Name = "queuedOrderIds", EmitDefaultValue = true)]
        public List<int> QueuedOrderIds { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name = "errorDetails", EmitDefaultValue = true)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// Gets or Sets LastLoadedItemId
        /// </summary>
        [DataMember(Name = "lastLoadedItemId", EmitDefaultValue = false)]
        public int LastLoadedItemId { get; set; }

        /// <summary>
        /// Gets or Sets UpTimeSeconds
        /// </summary>
        [DataMember(Name = "upTimeSeconds", EmitDefaultValue = false)]
        public int UpTimeSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CurrentJobTemplate
        /// </summary>
        [DataMember(Name = "currentJobTemplate", EmitDefaultValue = false)]
        public JobTemplateDto CurrentJobTemplate { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowTypeName
        /// </summary>
        [DataMember(Name = "workflowTypeName", EmitDefaultValue = true)]
        public string WorkflowTypeName { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "sessionId", EmitDefaultValue = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowSchedulerStateDto {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  QueueSize: ").Append(QueueSize).Append("\n");
            sb.Append("  QueuedOrderIds: ").Append(QueuedOrderIds).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  LastLoadedItemId: ").Append(LastLoadedItemId).Append("\n");
            sb.Append("  UpTimeSeconds: ").Append(UpTimeSeconds).Append("\n");
            sb.Append("  CurrentJobTemplate: ").Append(CurrentJobTemplate).Append("\n");
            sb.Append("  WorkflowTypeName: ").Append(WorkflowTypeName).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowSchedulerStateDto);
        }

        /// <summary>
        /// Returns true if WorkflowSchedulerStateDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowSchedulerStateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowSchedulerStateDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.QueueSize == input.QueueSize ||
                    this.QueueSize.Equals(input.QueueSize)
                ) && 
                (
                    this.QueuedOrderIds == input.QueuedOrderIds ||
                    this.QueuedOrderIds != null &&
                    input.QueuedOrderIds != null &&
                    this.QueuedOrderIds.SequenceEqual(input.QueuedOrderIds)
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    (this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(input.ErrorDetails))
                ) && 
                (
                    this.LastLoadedItemId == input.LastLoadedItemId ||
                    this.LastLoadedItemId.Equals(input.LastLoadedItemId)
                ) && 
                (
                    this.UpTimeSeconds == input.UpTimeSeconds ||
                    this.UpTimeSeconds.Equals(input.UpTimeSeconds)
                ) && 
                (
                    this.CurrentJobTemplate == input.CurrentJobTemplate ||
                    (this.CurrentJobTemplate != null &&
                    this.CurrentJobTemplate.Equals(input.CurrentJobTemplate))
                ) && 
                (
                    this.WorkflowTypeName == input.WorkflowTypeName ||
                    (this.WorkflowTypeName != null &&
                    this.WorkflowTypeName.Equals(input.WorkflowTypeName))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QueueSize.GetHashCode();
                if (this.QueuedOrderIds != null)
                {
                    hashCode = (hashCode * 59) + this.QueuedOrderIds.GetHashCode();
                }
                if (this.ErrorDetails != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastLoadedItemId.GetHashCode();
                hashCode = (hashCode * 59) + this.UpTimeSeconds.GetHashCode();
                if (this.CurrentJobTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentJobTemplate.GetHashCode();
                }
                if (this.WorkflowTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.WorkflowTypeName.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
