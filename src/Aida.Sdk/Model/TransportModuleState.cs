/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// TransportModuleState
    /// </summary>
    [DataContract(Name = "TransportModuleState")]
    public partial class TransportModuleState : IEquatable<TransportModuleState>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ModuleStatus
        /// </summary>
        [DataMember(Name = "moduleStatus", EmitDefaultValue = false)]
        public TransportModuleStatus? ModuleStatus { get; set; }

        /// <summary>
        /// Gets or Sets ModuleType
        /// </summary>
        [DataMember(Name = "moduleType", EmitDefaultValue = false)]
        public TransportModuleType? ModuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportModuleState" /> class.
        /// </summary>
        /// <param name="moduleId">moduleId.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="moduleStatus">moduleStatus.</param>
        /// <param name="moduleType">moduleType.</param>
        /// <param name="photoSensors">photoSensors.</param>
        public TransportModuleState(int moduleId = default(int), string serialNumber = default(string), TransportModuleConfiguration configuration = default(TransportModuleConfiguration), TransportModuleStatus? moduleStatus = default(TransportModuleStatus?), TransportModuleType? moduleType = default(TransportModuleType?), List<PhotoSensor> photoSensors = default(List<PhotoSensor>))
        {
            this.ModuleId = moduleId;
            this.SerialNumber = serialNumber;
            this._Configuration = configuration;
            this.ModuleStatus = moduleStatus;
            this.ModuleType = moduleType;
            this.PhotoSensors = photoSensors;
        }

        /// <summary>
        /// Gets or Sets ModuleId
        /// </summary>
        [DataMember(Name = "moduleId", EmitDefaultValue = false)]
        public int ModuleId { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "serialNumber", EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets _Configuration
        /// </summary>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public TransportModuleConfiguration _Configuration { get; set; }

        /// <summary>
        /// Gets or Sets PhotoSensors
        /// </summary>
        [DataMember(Name = "photoSensors", EmitDefaultValue = true)]
        public List<PhotoSensor> PhotoSensors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransportModuleState {\n");
            sb.Append("  ModuleId: ").Append(ModuleId).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  _Configuration: ").Append(_Configuration).Append("\n");
            sb.Append("  ModuleStatus: ").Append(ModuleStatus).Append("\n");
            sb.Append("  ModuleType: ").Append(ModuleType).Append("\n");
            sb.Append("  PhotoSensors: ").Append(PhotoSensors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransportModuleState);
        }

        /// <summary>
        /// Returns true if TransportModuleState instances are equal
        /// </summary>
        /// <param name="input">Instance of TransportModuleState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportModuleState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ModuleId == input.ModuleId ||
                    this.ModuleId.Equals(input.ModuleId)
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this._Configuration == input._Configuration ||
                    (this._Configuration != null &&
                    this._Configuration.Equals(input._Configuration))
                ) && 
                (
                    this.ModuleStatus == input.ModuleStatus ||
                    this.ModuleStatus.Equals(input.ModuleStatus)
                ) && 
                (
                    this.ModuleType == input.ModuleType ||
                    this.ModuleType.Equals(input.ModuleType)
                ) && 
                (
                    this.PhotoSensors == input.PhotoSensors ||
                    this.PhotoSensors != null &&
                    input.PhotoSensors != null &&
                    this.PhotoSensors.SequenceEqual(input.PhotoSensors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ModuleId.GetHashCode();
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this._Configuration != null)
                {
                    hashCode = (hashCode * 59) + this._Configuration.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModuleStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.ModuleType.GetHashCode();
                if (this.PhotoSensors != null)
                {
                    hashCode = (hashCode * 59) + this.PhotoSensors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
