/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// HomographySettingsDto
    /// </summary>
    [DataContract(Name = "HomographySettingsDto")]
    public partial class HomographySettingsDto : IEquatable<HomographySettingsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HomographySettingsDto" /> class.
        /// </summary>
        /// <param name="cameraId">cameraId.</param>
        /// <param name="dstPoints">dstPoints.</param>
        /// <param name="srcPoints">srcPoints.</param>
        /// <param name="homographyMatrix">homographyMatrix.</param>
        public HomographySettingsDto(string cameraId = default(string), List<Point2fDto> dstPoints = default(List<Point2fDto>), List<Point2fDto> srcPoints = default(List<Point2fDto>), List<float> homographyMatrix = default(List<float>))
        {
            this.CameraId = cameraId;
            this.DstPoints = dstPoints;
            this.SrcPoints = srcPoints;
            this.HomographyMatrix = homographyMatrix;
        }

        /// <summary>
        /// Gets or Sets CameraId
        /// </summary>
        [DataMember(Name = "cameraId", EmitDefaultValue = true)]
        public string CameraId { get; set; }

        /// <summary>
        /// Gets or Sets DstPoints
        /// </summary>
        [DataMember(Name = "dstPoints", EmitDefaultValue = true)]
        public List<Point2fDto> DstPoints { get; set; }

        /// <summary>
        /// Gets or Sets SrcPoints
        /// </summary>
        [DataMember(Name = "srcPoints", EmitDefaultValue = true)]
        public List<Point2fDto> SrcPoints { get; set; }

        /// <summary>
        /// Gets or Sets HomographyMatrix
        /// </summary>
        [DataMember(Name = "homographyMatrix", EmitDefaultValue = true)]
        public List<float> HomographyMatrix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HomographySettingsDto {\n");
            sb.Append("  CameraId: ").Append(CameraId).Append("\n");
            sb.Append("  DstPoints: ").Append(DstPoints).Append("\n");
            sb.Append("  SrcPoints: ").Append(SrcPoints).Append("\n");
            sb.Append("  HomographyMatrix: ").Append(HomographyMatrix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HomographySettingsDto);
        }

        /// <summary>
        /// Returns true if HomographySettingsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of HomographySettingsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HomographySettingsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CameraId == input.CameraId ||
                    (this.CameraId != null &&
                    this.CameraId.Equals(input.CameraId))
                ) && 
                (
                    this.DstPoints == input.DstPoints ||
                    this.DstPoints != null &&
                    input.DstPoints != null &&
                    this.DstPoints.SequenceEqual(input.DstPoints)
                ) && 
                (
                    this.SrcPoints == input.SrcPoints ||
                    this.SrcPoints != null &&
                    input.SrcPoints != null &&
                    this.SrcPoints.SequenceEqual(input.SrcPoints)
                ) && 
                (
                    this.HomographyMatrix == input.HomographyMatrix ||
                    this.HomographyMatrix != null &&
                    input.HomographyMatrix != null &&
                    this.HomographyMatrix.SequenceEqual(input.HomographyMatrix)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CameraId != null)
                {
                    hashCode = (hashCode * 59) + this.CameraId.GetHashCode();
                }
                if (this.DstPoints != null)
                {
                    hashCode = (hashCode * 59) + this.DstPoints.GetHashCode();
                }
                if (this.SrcPoints != null)
                {
                    hashCode = (hashCode * 59) + this.SrcPoints.GetHashCode();
                }
                if (this.HomographyMatrix != null)
                {
                    hashCode = (hashCode * 59) + this.HomographyMatrix.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
