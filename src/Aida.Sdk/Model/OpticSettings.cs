/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// OpticSettings
    /// </summary>
    [DataContract(Name = "OpticSettings")]
    public partial class OpticSettings : IEquatable<OpticSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpticSettings" /> class.
        /// </summary>
        /// <param name="cameraPresetName">cameraPresetName.</param>
        /// <param name="warpPerspectiveOutputSizeX">warpPerspectiveOutputSizeX.</param>
        /// <param name="warpPerspectiveOutputSizeY">warpPerspectiveOutputSizeY.</param>
        /// <param name="pixelsPerMillimeterX">pixelsPerMillimeterX.</param>
        /// <param name="pixelsPerMillimeterY">pixelsPerMillimeterY.</param>
        public OpticSettings(string cameraPresetName = default(string), double warpPerspectiveOutputSizeX = default(double), double warpPerspectiveOutputSizeY = default(double), double pixelsPerMillimeterX = default(double), double pixelsPerMillimeterY = default(double))
        {
            this.CameraPresetName = cameraPresetName;
            this.WarpPerspectiveOutputSizeX = warpPerspectiveOutputSizeX;
            this.WarpPerspectiveOutputSizeY = warpPerspectiveOutputSizeY;
            this.PixelsPerMillimeterX = pixelsPerMillimeterX;
            this.PixelsPerMillimeterY = pixelsPerMillimeterY;
        }

        /// <summary>
        /// Gets or Sets CameraPresetName
        /// </summary>
        [DataMember(Name = "cameraPresetName", EmitDefaultValue = true)]
        public string CameraPresetName { get; set; }

        /// <summary>
        /// Gets or Sets WarpPerspectiveOutputSizeX
        /// </summary>
        [DataMember(Name = "warpPerspectiveOutputSizeX", EmitDefaultValue = false)]
        public double WarpPerspectiveOutputSizeX { get; set; }

        /// <summary>
        /// Gets or Sets WarpPerspectiveOutputSizeY
        /// </summary>
        [DataMember(Name = "warpPerspectiveOutputSizeY", EmitDefaultValue = false)]
        public double WarpPerspectiveOutputSizeY { get; set; }

        /// <summary>
        /// Gets or Sets PixelsPerMillimeterX
        /// </summary>
        [DataMember(Name = "pixelsPerMillimeterX", EmitDefaultValue = false)]
        public double PixelsPerMillimeterX { get; set; }

        /// <summary>
        /// Gets or Sets PixelsPerMillimeterY
        /// </summary>
        [DataMember(Name = "pixelsPerMillimeterY", EmitDefaultValue = false)]
        public double PixelsPerMillimeterY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpticSettings {\n");
            sb.Append("  CameraPresetName: ").Append(CameraPresetName).Append("\n");
            sb.Append("  WarpPerspectiveOutputSizeX: ").Append(WarpPerspectiveOutputSizeX).Append("\n");
            sb.Append("  WarpPerspectiveOutputSizeY: ").Append(WarpPerspectiveOutputSizeY).Append("\n");
            sb.Append("  PixelsPerMillimeterX: ").Append(PixelsPerMillimeterX).Append("\n");
            sb.Append("  PixelsPerMillimeterY: ").Append(PixelsPerMillimeterY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpticSettings);
        }

        /// <summary>
        /// Returns true if OpticSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of OpticSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpticSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CameraPresetName == input.CameraPresetName ||
                    (this.CameraPresetName != null &&
                    this.CameraPresetName.Equals(input.CameraPresetName))
                ) && 
                (
                    this.WarpPerspectiveOutputSizeX == input.WarpPerspectiveOutputSizeX ||
                    this.WarpPerspectiveOutputSizeX.Equals(input.WarpPerspectiveOutputSizeX)
                ) && 
                (
                    this.WarpPerspectiveOutputSizeY == input.WarpPerspectiveOutputSizeY ||
                    this.WarpPerspectiveOutputSizeY.Equals(input.WarpPerspectiveOutputSizeY)
                ) && 
                (
                    this.PixelsPerMillimeterX == input.PixelsPerMillimeterX ||
                    this.PixelsPerMillimeterX.Equals(input.PixelsPerMillimeterX)
                ) && 
                (
                    this.PixelsPerMillimeterY == input.PixelsPerMillimeterY ||
                    this.PixelsPerMillimeterY.Equals(input.PixelsPerMillimeterY)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CameraPresetName != null)
                {
                    hashCode = (hashCode * 59) + this.CameraPresetName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WarpPerspectiveOutputSizeX.GetHashCode();
                hashCode = (hashCode * 59) + this.WarpPerspectiveOutputSizeY.GetHashCode();
                hashCode = (hashCode * 59) + this.PixelsPerMillimeterX.GetHashCode();
                hashCode = (hashCode * 59) + this.PixelsPerMillimeterY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
