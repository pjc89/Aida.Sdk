/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// RuntimeMetrics
    /// </summary>
    [DataContract(Name = "RuntimeMetrics")]
    public partial class RuntimeMetrics : IEquatable<RuntimeMetrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeMetrics" /> class.
        /// </summary>
        /// <param name="runningJobs">runningJobs.</param>
        /// <param name="waitingJobs">waitingJobs.</param>
        /// <param name="completedJobs">completedJobs.</param>
        /// <param name="faultedJobs">faultedJobs.</param>
        /// <param name="averageJobDuration">averageJobDuration.</param>
        /// <param name="jobsPerHour">jobsPerHour.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="uptimeSeconds">uptimeSeconds.</param>
        public RuntimeMetrics(int runningJobs = default(int), int waitingJobs = default(int), int completedJobs = default(int), int faultedJobs = default(int), int averageJobDuration = default(int), int jobsPerHour = default(int), int frequency = default(int), int uptimeSeconds = default(int))
        {
            this.RunningJobs = runningJobs;
            this.WaitingJobs = waitingJobs;
            this.CompletedJobs = completedJobs;
            this.FaultedJobs = faultedJobs;
            this.AverageJobDuration = averageJobDuration;
            this.JobsPerHour = jobsPerHour;
            this.Frequency = frequency;
            this.UptimeSeconds = uptimeSeconds;
        }

        /// <summary>
        /// Gets or Sets RunningJobs
        /// </summary>
        [DataMember(Name = "runningJobs", EmitDefaultValue = false)]
        public int RunningJobs { get; set; }

        /// <summary>
        /// Gets or Sets WaitingJobs
        /// </summary>
        [DataMember(Name = "waitingJobs", EmitDefaultValue = false)]
        public int WaitingJobs { get; set; }

        /// <summary>
        /// Gets or Sets CompletedJobs
        /// </summary>
        [DataMember(Name = "completedJobs", EmitDefaultValue = false)]
        public int CompletedJobs { get; set; }

        /// <summary>
        /// Gets or Sets FaultedJobs
        /// </summary>
        [DataMember(Name = "faultedJobs", EmitDefaultValue = false)]
        public int FaultedJobs { get; set; }

        /// <summary>
        /// Gets or Sets AverageJobDuration
        /// </summary>
        [DataMember(Name = "averageJobDuration", EmitDefaultValue = false)]
        public int AverageJobDuration { get; set; }

        /// <summary>
        /// Gets or Sets JobsPerHour
        /// </summary>
        [DataMember(Name = "jobsPerHour", EmitDefaultValue = false)]
        public int JobsPerHour { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public int Frequency { get; set; }

        /// <summary>
        /// Gets or Sets UptimeSeconds
        /// </summary>
        [DataMember(Name = "uptimeSeconds", EmitDefaultValue = false)]
        public int UptimeSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuntimeMetrics {\n");
            sb.Append("  RunningJobs: ").Append(RunningJobs).Append("\n");
            sb.Append("  WaitingJobs: ").Append(WaitingJobs).Append("\n");
            sb.Append("  CompletedJobs: ").Append(CompletedJobs).Append("\n");
            sb.Append("  FaultedJobs: ").Append(FaultedJobs).Append("\n");
            sb.Append("  AverageJobDuration: ").Append(AverageJobDuration).Append("\n");
            sb.Append("  JobsPerHour: ").Append(JobsPerHour).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  UptimeSeconds: ").Append(UptimeSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeMetrics);
        }

        /// <summary>
        /// Returns true if RuntimeMetrics instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeMetrics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunningJobs == input.RunningJobs ||
                    this.RunningJobs.Equals(input.RunningJobs)
                ) && 
                (
                    this.WaitingJobs == input.WaitingJobs ||
                    this.WaitingJobs.Equals(input.WaitingJobs)
                ) && 
                (
                    this.CompletedJobs == input.CompletedJobs ||
                    this.CompletedJobs.Equals(input.CompletedJobs)
                ) && 
                (
                    this.FaultedJobs == input.FaultedJobs ||
                    this.FaultedJobs.Equals(input.FaultedJobs)
                ) && 
                (
                    this.AverageJobDuration == input.AverageJobDuration ||
                    this.AverageJobDuration.Equals(input.AverageJobDuration)
                ) && 
                (
                    this.JobsPerHour == input.JobsPerHour ||
                    this.JobsPerHour.Equals(input.JobsPerHour)
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    this.Frequency.Equals(input.Frequency)
                ) && 
                (
                    this.UptimeSeconds == input.UptimeSeconds ||
                    this.UptimeSeconds.Equals(input.UptimeSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RunningJobs.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingJobs.GetHashCode();
                hashCode = (hashCode * 59) + this.CompletedJobs.GetHashCode();
                hashCode = (hashCode * 59) + this.FaultedJobs.GetHashCode();
                hashCode = (hashCode * 59) + this.AverageJobDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.JobsPerHour.GetHashCode();
                hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                hashCode = (hashCode * 59) + this.UptimeSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
