/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Aida.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Aida.Sdk.Client.OpenAPIDateConverter;

namespace Aida.Sdk.Model
{
    /// <summary>
    /// ScannerEntityDto
    /// </summary>
    [DataContract(Name = "ScannerEntityDto")]
    public partial class ScannerEntityDto : IEquatable<ScannerEntityDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public EntityType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScannerEntityDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="penId">penId.</param>
        /// <param name="markLoopCount">markLoopCount.</param>
        /// <param name="markFlags">markFlags.</param>
        /// <param name="name">name.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="type">type.</param>
        /// <param name="userData">userData.</param>
        /// <param name="layoutId">layoutId.</param>
        /// <param name="layoutName">layoutName.</param>
        /// <param name="rotationAngle">rotationAngle.</param>
        /// <param name="expectedMarkDuration">expectedMarkDuration.</param>
        /// <param name="outline">outline.</param>
        /// <param name="text">text.</param>
        /// <param name="fontName">fontName.</param>
        /// <param name="textSize">textSize.</param>
        /// <param name="textOrientation">textOrientation.</param>
        /// <param name="charSpacing">charSpacing.</param>
        /// <param name="textBaseline">textBaseline.</param>
        /// <param name="textHeightLimit">textHeightLimit.</param>
        /// <param name="textLenghtLimit">textLenghtLimit.</param>
        /// <param name="textRadius">textRadius.</param>
        /// <param name="textStartAngle">textStartAngle.</param>
        /// <param name="bitmapModeFlags">bitmapModeFlags.</param>
        /// <param name="imageIntensity">imageIntensity.</param>
        /// <param name="imageBrightness">imageBrightness.</param>
        /// <param name="imageDitherStep">imageDitherStep.</param>
        /// <param name="hatchPairs">hatchPairs.</param>
        public ScannerEntityDto(int? id = default(int?), int? penId = default(int?), int? markLoopCount = default(int?), ScannerEntityMarkFlagsDto markFlags = default(ScannerEntityMarkFlagsDto), string name = default(string), string displayName = default(string), string prefix = default(string), EntityType? type = default(EntityType?), int? userData = default(int?), int? layoutId = default(int?), string layoutName = default(string), double? rotationAngle = default(double?), string expectedMarkDuration = default(string), DRectangleDto outline = default(DRectangleDto), string text = default(string), string fontName = default(string), double? textSize = default(double?), double? textOrientation = default(double?), double? charSpacing = default(double?), double? textBaseline = default(double?), double? textHeightLimit = default(double?), double? textLenghtLimit = default(double?), double? textRadius = default(double?), double? textStartAngle = default(double?), ScannerEntityBitmapModeFlags bitmapModeFlags = default(ScannerEntityBitmapModeFlags), double? imageIntensity = default(double?), double? imageBrightness = default(double?), double? imageDitherStep = default(double?), List<HatchPairDto> hatchPairs = default(List<HatchPairDto>))
        {
            this.Id = id;
            this.PenId = penId;
            this.MarkLoopCount = markLoopCount;
            this.MarkFlags = markFlags;
            this.Name = name;
            this.DisplayName = displayName;
            this.Prefix = prefix;
            this.Type = type;
            this.UserData = userData;
            this.LayoutId = layoutId;
            this.LayoutName = layoutName;
            this.RotationAngle = rotationAngle;
            this.ExpectedMarkDuration = expectedMarkDuration;
            this.Outline = outline;
            this.Text = text;
            this.FontName = fontName;
            this.TextSize = textSize;
            this.TextOrientation = textOrientation;
            this.CharSpacing = charSpacing;
            this.TextBaseline = textBaseline;
            this.TextHeightLimit = textHeightLimit;
            this.TextLenghtLimit = textLenghtLimit;
            this.TextRadius = textRadius;
            this.TextStartAngle = textStartAngle;
            this.BitmapModeFlags = bitmapModeFlags;
            this.ImageIntensity = imageIntensity;
            this.ImageBrightness = imageBrightness;
            this.ImageDitherStep = imageDitherStep;
            this.HatchPairs = hatchPairs;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets PenId
        /// </summary>
        [DataMember(Name = "penId", EmitDefaultValue = true)]
        public int? PenId { get; set; }

        /// <summary>
        /// Gets or Sets MarkLoopCount
        /// </summary>
        [DataMember(Name = "markLoopCount", EmitDefaultValue = true)]
        public int? MarkLoopCount { get; set; }

        /// <summary>
        /// Gets or Sets MarkFlags
        /// </summary>
        [DataMember(Name = "markFlags", EmitDefaultValue = false)]
        public ScannerEntityMarkFlagsDto MarkFlags { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "prefix", EmitDefaultValue = true)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets UserData
        /// </summary>
        [DataMember(Name = "userData", EmitDefaultValue = true)]
        public int? UserData { get; set; }

        /// <summary>
        /// Gets or Sets LayoutId
        /// </summary>
        [DataMember(Name = "layoutId", EmitDefaultValue = true)]
        public int? LayoutId { get; set; }

        /// <summary>
        /// Gets or Sets LayoutName
        /// </summary>
        [DataMember(Name = "layoutName", EmitDefaultValue = true)]
        public string LayoutName { get; set; }

        /// <summary>
        /// Gets or Sets RotationAngle
        /// </summary>
        [DataMember(Name = "rotationAngle", EmitDefaultValue = true)]
        public double? RotationAngle { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedMarkDuration
        /// </summary>
        /// <example>&quot;25:01:01.001&quot;</example>
        [DataMember(Name = "expectedMarkDuration", EmitDefaultValue = false)]
        public string ExpectedMarkDuration { get; set; }

        /// <summary>
        /// Gets or Sets Outline
        /// </summary>
        [DataMember(Name = "outline", EmitDefaultValue = false)]
        public DRectangleDto Outline { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets FontName
        /// </summary>
        [DataMember(Name = "fontName", EmitDefaultValue = true)]
        public string FontName { get; set; }

        /// <summary>
        /// Gets or Sets TextSize
        /// </summary>
        [DataMember(Name = "textSize", EmitDefaultValue = true)]
        public double? TextSize { get; set; }

        /// <summary>
        /// Gets or Sets TextOrientation
        /// </summary>
        [DataMember(Name = "textOrientation", EmitDefaultValue = true)]
        public double? TextOrientation { get; set; }

        /// <summary>
        /// Gets or Sets CharSpacing
        /// </summary>
        [DataMember(Name = "charSpacing", EmitDefaultValue = true)]
        public double? CharSpacing { get; set; }

        /// <summary>
        /// Gets or Sets TextBaseline
        /// </summary>
        [DataMember(Name = "textBaseline", EmitDefaultValue = true)]
        public double? TextBaseline { get; set; }

        /// <summary>
        /// Gets or Sets TextHeightLimit
        /// </summary>
        [DataMember(Name = "textHeightLimit", EmitDefaultValue = true)]
        public double? TextHeightLimit { get; set; }

        /// <summary>
        /// Gets or Sets TextLenghtLimit
        /// </summary>
        [DataMember(Name = "textLenghtLimit", EmitDefaultValue = true)]
        public double? TextLenghtLimit { get; set; }

        /// <summary>
        /// Gets or Sets TextRadius
        /// </summary>
        [DataMember(Name = "textRadius", EmitDefaultValue = true)]
        public double? TextRadius { get; set; }

        /// <summary>
        /// Gets or Sets TextStartAngle
        /// </summary>
        [DataMember(Name = "textStartAngle", EmitDefaultValue = true)]
        public double? TextStartAngle { get; set; }

        /// <summary>
        /// Gets or Sets BitmapModeFlags
        /// </summary>
        [DataMember(Name = "bitmapModeFlags", EmitDefaultValue = false)]
        public ScannerEntityBitmapModeFlags BitmapModeFlags { get; set; }

        /// <summary>
        /// Gets or Sets ImageIntensity
        /// </summary>
        [DataMember(Name = "imageIntensity", EmitDefaultValue = true)]
        public double? ImageIntensity { get; set; }

        /// <summary>
        /// Gets or Sets ImageBrightness
        /// </summary>
        [DataMember(Name = "imageBrightness", EmitDefaultValue = true)]
        public double? ImageBrightness { get; set; }

        /// <summary>
        /// Gets or Sets ImageDitherStep
        /// </summary>
        [DataMember(Name = "imageDitherStep", EmitDefaultValue = true)]
        public double? ImageDitherStep { get; set; }

        /// <summary>
        /// Gets or Sets HatchPairs
        /// </summary>
        [DataMember(Name = "hatchPairs", EmitDefaultValue = true)]
        public List<HatchPairDto> HatchPairs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScannerEntityDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PenId: ").Append(PenId).Append("\n");
            sb.Append("  MarkLoopCount: ").Append(MarkLoopCount).Append("\n");
            sb.Append("  MarkFlags: ").Append(MarkFlags).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  LayoutId: ").Append(LayoutId).Append("\n");
            sb.Append("  LayoutName: ").Append(LayoutName).Append("\n");
            sb.Append("  RotationAngle: ").Append(RotationAngle).Append("\n");
            sb.Append("  ExpectedMarkDuration: ").Append(ExpectedMarkDuration).Append("\n");
            sb.Append("  Outline: ").Append(Outline).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  FontName: ").Append(FontName).Append("\n");
            sb.Append("  TextSize: ").Append(TextSize).Append("\n");
            sb.Append("  TextOrientation: ").Append(TextOrientation).Append("\n");
            sb.Append("  CharSpacing: ").Append(CharSpacing).Append("\n");
            sb.Append("  TextBaseline: ").Append(TextBaseline).Append("\n");
            sb.Append("  TextHeightLimit: ").Append(TextHeightLimit).Append("\n");
            sb.Append("  TextLenghtLimit: ").Append(TextLenghtLimit).Append("\n");
            sb.Append("  TextRadius: ").Append(TextRadius).Append("\n");
            sb.Append("  TextStartAngle: ").Append(TextStartAngle).Append("\n");
            sb.Append("  BitmapModeFlags: ").Append(BitmapModeFlags).Append("\n");
            sb.Append("  ImageIntensity: ").Append(ImageIntensity).Append("\n");
            sb.Append("  ImageBrightness: ").Append(ImageBrightness).Append("\n");
            sb.Append("  ImageDitherStep: ").Append(ImageDitherStep).Append("\n");
            sb.Append("  HatchPairs: ").Append(HatchPairs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScannerEntityDto);
        }

        /// <summary>
        /// Returns true if ScannerEntityDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ScannerEntityDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScannerEntityDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PenId == input.PenId ||
                    (this.PenId != null &&
                    this.PenId.Equals(input.PenId))
                ) && 
                (
                    this.MarkLoopCount == input.MarkLoopCount ||
                    (this.MarkLoopCount != null &&
                    this.MarkLoopCount.Equals(input.MarkLoopCount))
                ) && 
                (
                    this.MarkFlags == input.MarkFlags ||
                    (this.MarkFlags != null &&
                    this.MarkFlags.Equals(input.MarkFlags))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UserData == input.UserData ||
                    (this.UserData != null &&
                    this.UserData.Equals(input.UserData))
                ) && 
                (
                    this.LayoutId == input.LayoutId ||
                    (this.LayoutId != null &&
                    this.LayoutId.Equals(input.LayoutId))
                ) && 
                (
                    this.LayoutName == input.LayoutName ||
                    (this.LayoutName != null &&
                    this.LayoutName.Equals(input.LayoutName))
                ) && 
                (
                    this.RotationAngle == input.RotationAngle ||
                    (this.RotationAngle != null &&
                    this.RotationAngle.Equals(input.RotationAngle))
                ) && 
                (
                    this.ExpectedMarkDuration == input.ExpectedMarkDuration ||
                    (this.ExpectedMarkDuration != null &&
                    this.ExpectedMarkDuration.Equals(input.ExpectedMarkDuration))
                ) && 
                (
                    this.Outline == input.Outline ||
                    (this.Outline != null &&
                    this.Outline.Equals(input.Outline))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.FontName == input.FontName ||
                    (this.FontName != null &&
                    this.FontName.Equals(input.FontName))
                ) && 
                (
                    this.TextSize == input.TextSize ||
                    (this.TextSize != null &&
                    this.TextSize.Equals(input.TextSize))
                ) && 
                (
                    this.TextOrientation == input.TextOrientation ||
                    (this.TextOrientation != null &&
                    this.TextOrientation.Equals(input.TextOrientation))
                ) && 
                (
                    this.CharSpacing == input.CharSpacing ||
                    (this.CharSpacing != null &&
                    this.CharSpacing.Equals(input.CharSpacing))
                ) && 
                (
                    this.TextBaseline == input.TextBaseline ||
                    (this.TextBaseline != null &&
                    this.TextBaseline.Equals(input.TextBaseline))
                ) && 
                (
                    this.TextHeightLimit == input.TextHeightLimit ||
                    (this.TextHeightLimit != null &&
                    this.TextHeightLimit.Equals(input.TextHeightLimit))
                ) && 
                (
                    this.TextLenghtLimit == input.TextLenghtLimit ||
                    (this.TextLenghtLimit != null &&
                    this.TextLenghtLimit.Equals(input.TextLenghtLimit))
                ) && 
                (
                    this.TextRadius == input.TextRadius ||
                    (this.TextRadius != null &&
                    this.TextRadius.Equals(input.TextRadius))
                ) && 
                (
                    this.TextStartAngle == input.TextStartAngle ||
                    (this.TextStartAngle != null &&
                    this.TextStartAngle.Equals(input.TextStartAngle))
                ) && 
                (
                    this.BitmapModeFlags == input.BitmapModeFlags ||
                    (this.BitmapModeFlags != null &&
                    this.BitmapModeFlags.Equals(input.BitmapModeFlags))
                ) && 
                (
                    this.ImageIntensity == input.ImageIntensity ||
                    (this.ImageIntensity != null &&
                    this.ImageIntensity.Equals(input.ImageIntensity))
                ) && 
                (
                    this.ImageBrightness == input.ImageBrightness ||
                    (this.ImageBrightness != null &&
                    this.ImageBrightness.Equals(input.ImageBrightness))
                ) && 
                (
                    this.ImageDitherStep == input.ImageDitherStep ||
                    (this.ImageDitherStep != null &&
                    this.ImageDitherStep.Equals(input.ImageDitherStep))
                ) && 
                (
                    this.HatchPairs == input.HatchPairs ||
                    this.HatchPairs != null &&
                    input.HatchPairs != null &&
                    this.HatchPairs.SequenceEqual(input.HatchPairs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PenId != null)
                {
                    hashCode = (hashCode * 59) + this.PenId.GetHashCode();
                }
                if (this.MarkLoopCount != null)
                {
                    hashCode = (hashCode * 59) + this.MarkLoopCount.GetHashCode();
                }
                if (this.MarkFlags != null)
                {
                    hashCode = (hashCode * 59) + this.MarkFlags.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Prefix != null)
                {
                    hashCode = (hashCode * 59) + this.Prefix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.UserData != null)
                {
                    hashCode = (hashCode * 59) + this.UserData.GetHashCode();
                }
                if (this.LayoutId != null)
                {
                    hashCode = (hashCode * 59) + this.LayoutId.GetHashCode();
                }
                if (this.LayoutName != null)
                {
                    hashCode = (hashCode * 59) + this.LayoutName.GetHashCode();
                }
                if (this.RotationAngle != null)
                {
                    hashCode = (hashCode * 59) + this.RotationAngle.GetHashCode();
                }
                if (this.ExpectedMarkDuration != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedMarkDuration.GetHashCode();
                }
                if (this.Outline != null)
                {
                    hashCode = (hashCode * 59) + this.Outline.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.FontName != null)
                {
                    hashCode = (hashCode * 59) + this.FontName.GetHashCode();
                }
                if (this.TextSize != null)
                {
                    hashCode = (hashCode * 59) + this.TextSize.GetHashCode();
                }
                if (this.TextOrientation != null)
                {
                    hashCode = (hashCode * 59) + this.TextOrientation.GetHashCode();
                }
                if (this.CharSpacing != null)
                {
                    hashCode = (hashCode * 59) + this.CharSpacing.GetHashCode();
                }
                if (this.TextBaseline != null)
                {
                    hashCode = (hashCode * 59) + this.TextBaseline.GetHashCode();
                }
                if (this.TextHeightLimit != null)
                {
                    hashCode = (hashCode * 59) + this.TextHeightLimit.GetHashCode();
                }
                if (this.TextLenghtLimit != null)
                {
                    hashCode = (hashCode * 59) + this.TextLenghtLimit.GetHashCode();
                }
                if (this.TextRadius != null)
                {
                    hashCode = (hashCode * 59) + this.TextRadius.GetHashCode();
                }
                if (this.TextStartAngle != null)
                {
                    hashCode = (hashCode * 59) + this.TextStartAngle.GetHashCode();
                }
                if (this.BitmapModeFlags != null)
                {
                    hashCode = (hashCode * 59) + this.BitmapModeFlags.GetHashCode();
                }
                if (this.ImageIntensity != null)
                {
                    hashCode = (hashCode * 59) + this.ImageIntensity.GetHashCode();
                }
                if (this.ImageBrightness != null)
                {
                    hashCode = (hashCode * 59) + this.ImageBrightness.GetHashCode();
                }
                if (this.ImageDitherStep != null)
                {
                    hashCode = (hashCode * 59) + this.ImageDitherStep.GetHashCode();
                }
                if (this.HatchPairs != null)
                {
                    hashCode = (hashCode * 59) + this.HatchPairs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
