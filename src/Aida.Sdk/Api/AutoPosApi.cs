/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Aida.Sdk.Client;
using Aida.Sdk.Model;

namespace Aida.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutoPosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new XY Auto-Position configuration
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <returns>JobTemplateLayoutAutoPosSettingsDto</returns>
        JobTemplateLayoutAutoPosSettingsDto AddAutoPosSettings(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto));

        /// <summary>
        /// Creates a new XY Auto-Position configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateLayoutAutoPosSettingsDto</returns>
        ApiResponse<JobTemplateLayoutAutoPosSettingsDto> AddAutoPosSettingsWithHttpInfo(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto));
        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <returns></returns>
        void AutoPosConfigDebugLive(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?));

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoPosConfigDebugLiveWithHttpInfo(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?));
        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        void AutoPosDebug(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));

        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoPosDebugWithHttpInfo(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));
        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        void AutoPosDebugLive(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoPosDebugLiveWithHttpInfo(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        TemplateMatchingConfigurationDto CreateTemplateMatchingConfiguration(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        ApiResponse<TemplateMatchingConfigurationDto> CreateTemplateMatchingConfigurationWithHttpInfo(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <returns>JobTemplateLayoutAutoPosSettingsDto</returns>
        JobTemplateLayoutAutoPosSettingsDto DeleteJobTemplateLayoutAutoPosSettings(int autoPosSettingsId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <returns>ApiResponse of JobTemplateLayoutAutoPosSettingsDto</returns>
        ApiResponse<JobTemplateLayoutAutoPosSettingsDto> DeleteJobTemplateLayoutAutoPosSettingsWithHttpInfo(int autoPosSettingsId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        TemplateMatchingConfigurationDto DeleteTemplateMatchingConfiguration(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        ApiResponse<TemplateMatchingConfigurationDto> DeleteTemplateMatchingConfigurationWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchTemplateMatchingConfigurationsResultDto</returns>
        SearchTemplateMatchingConfigurationsResultDto FindTemplateMatchingConfigurations(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchTemplateMatchingConfigurationsResultDto</returns>
        ApiResponse<SearchTemplateMatchingConfigurationsResultDto> FindTemplateMatchingConfigurationsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>AutoPosResultDto</returns>
        AutoPosResultDto GetOffset(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));

        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of AutoPosResultDto</returns>
        ApiResponse<AutoPosResultDto> GetOffsetWithHttpInfo(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        TemplateMatchingConfigurationDto GetTemplateMatchingConfigurationById(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        ApiResponse<TemplateMatchingConfigurationDto> GetTemplateMatchingConfigurationByIdWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        void TemplateMatchingConfigurationDebugLivePage(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplateMatchingConfigurationDebugLivePageWithHttpInfo(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        void TemplateMatchingDebugLive(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplateMatchingDebugLiveWithHttpInfo(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <returns>JobTemplateLayoutAutoPosSettingsDto</returns>
        JobTemplateLayoutAutoPosSettingsDto UpdateAutoPosSettings(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateLayoutAutoPosSettingsDto</returns>
        ApiResponse<JobTemplateLayoutAutoPosSettingsDto> UpdateAutoPosSettingsWithHttpInfo(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        TemplateMatchingConfigurationDto UpdateTemplateMatchingConfiguration(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        ApiResponse<TemplateMatchingConfigurationDto> UpdateTemplateMatchingConfigurationWithHttpInfo(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutoPosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new XY Auto-Position configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateLayoutAutoPosSettingsDto</returns>
        System.Threading.Tasks.Task<JobTemplateLayoutAutoPosSettingsDto> AddAutoPosSettingsAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new XY Auto-Position configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateLayoutAutoPosSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTemplateLayoutAutoPosSettingsDto>> AddAutoPosSettingsWithHttpInfoAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoPosConfigDebugLiveAsync(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoPosConfigDebugLiveWithHttpInfoAsync(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoPosDebugAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoPosDebugWithHttpInfoAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoPosDebugLiveAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoPosDebugLiveWithHttpInfoAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> CreateTemplateMatchingConfigurationAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMatchingConfigurationDto>> CreateTemplateMatchingConfigurationWithHttpInfoAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateLayoutAutoPosSettingsDto</returns>
        System.Threading.Tasks.Task<JobTemplateLayoutAutoPosSettingsDto> DeleteJobTemplateLayoutAutoPosSettingsAsync(int autoPosSettingsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateLayoutAutoPosSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTemplateLayoutAutoPosSettingsDto>> DeleteJobTemplateLayoutAutoPosSettingsWithHttpInfoAsync(int autoPosSettingsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> DeleteTemplateMatchingConfigurationAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMatchingConfigurationDto>> DeleteTemplateMatchingConfigurationWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchTemplateMatchingConfigurationsResultDto</returns>
        System.Threading.Tasks.Task<SearchTemplateMatchingConfigurationsResultDto> FindTemplateMatchingConfigurationsAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchTemplateMatchingConfigurationsResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchTemplateMatchingConfigurationsResultDto>> FindTemplateMatchingConfigurationsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutoPosResultDto</returns>
        System.Threading.Tasks.Task<AutoPosResultDto> GetOffsetAsync(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutoPosResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutoPosResultDto>> GetOffsetWithHttpInfoAsync(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> GetTemplateMatchingConfigurationByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMatchingConfigurationDto>> GetTemplateMatchingConfigurationByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplateMatchingConfigurationDebugLivePageAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplateMatchingConfigurationDebugLivePageWithHttpInfoAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplateMatchingDebugLiveAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplateMatchingDebugLiveWithHttpInfoAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateLayoutAutoPosSettingsDto</returns>
        System.Threading.Tasks.Task<JobTemplateLayoutAutoPosSettingsDto> UpdateAutoPosSettingsAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateLayoutAutoPosSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobTemplateLayoutAutoPosSettingsDto>> UpdateAutoPosSettingsWithHttpInfoAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> UpdateTemplateMatchingConfigurationAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMatchingConfigurationDto>> UpdateTemplateMatchingConfigurationWithHttpInfoAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutoPosApi : IAutoPosApiSync, IAutoPosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutoPosApi : IDisposable, IAutoPosApi
    {
        private Aida.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AutoPosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AutoPosApi(string basePath)
        {
            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                new Aida.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AutoPosApi(Aida.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AutoPosApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AutoPosApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                new Aida.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AutoPosApi(HttpClient client, Aida.Sdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoPosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AutoPosApi(Aida.Sdk.Client.ISynchronousClient client, Aida.Sdk.Client.IAsynchronousClient asyncClient, Aida.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Aida.Sdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Aida.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Aida.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Aida.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aida.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new XY Auto-Position configuration 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <returns>JobTemplateLayoutAutoPosSettingsDto</returns>
        public JobTemplateLayoutAutoPosSettingsDto AddAutoPosSettings(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto))
        {
            Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> localVarResponse = AddAutoPosSettingsWithHttpInfo(scannerId, jobTemplateLayoutAutoPosSettingsDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new XY Auto-Position configuration 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateLayoutAutoPosSettingsDto</returns>
        public Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> AddAutoPosSettingsWithHttpInfo(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = jobTemplateLayoutAutoPosSettingsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobTemplateLayoutAutoPosSettingsDto>("/aida/v1/autopos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAutoPosSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new XY Auto-Position configuration 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateLayoutAutoPosSettingsDto</returns>
        public async System.Threading.Tasks.Task<JobTemplateLayoutAutoPosSettingsDto> AddAutoPosSettingsAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> localVarResponse = await AddAutoPosSettingsWithHttpInfoAsync(scannerId, jobTemplateLayoutAutoPosSettingsDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new XY Auto-Position configuration 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettingsDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateLayoutAutoPosSettingsDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto>> AddAutoPosSettingsWithHttpInfoAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettingsDto jobTemplateLayoutAutoPosSettingsDto = default(JobTemplateLayoutAutoPosSettingsDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = jobTemplateLayoutAutoPosSettingsDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<JobTemplateLayoutAutoPosSettingsDto>("/aida/v1/autopos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAutoPosSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <returns></returns>
        public void AutoPosConfigDebugLive(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?))
        {
            AutoPosConfigDebugLiveWithHttpInfo(jobTemplateId, layoutId, scannerId, cameraId, threshold);
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Client.ApiResponse<Object> AutoPosConfigDebugLiveWithHttpInfo(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?))
        {
            // verify the required parameter 'scannerId' is set
            if (scannerId == null)
                throw new Aida.Sdk.Client.ApiException(400, "Missing required parameter 'scannerId' when calling AutoPosApi->AutoPosConfigDebugLive");

            // verify the required parameter 'cameraId' is set
            if (cameraId == null)
                throw new Aida.Sdk.Client.ApiException(400, "Missing required parameter 'cameraId' when calling AutoPosApi->AutoPosConfigDebugLive");

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobTemplateId", Aida.Sdk.Client.ClientUtils.ParameterToString(jobTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("layoutId", Aida.Sdk.Client.ClientUtils.ParameterToString(layoutId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scannerId", Aida.Sdk.Client.ClientUtils.ParameterToString(scannerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cameraId", Aida.Sdk.Client.ClientUtils.ParameterToString(cameraId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aida/v1/autopos/job/{jobTemplateId}/layout/{layoutId}/scanner/{scannerId}/debug/live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPosConfigDebugLive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoPosConfigDebugLiveAsync(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AutoPosConfigDebugLiveWithHttpInfoAsync(jobTemplateId, layoutId, scannerId, cameraId, threshold, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTemplateId"></param>
        /// <param name="layoutId"></param>
        /// <param name="scannerId"></param>
        /// <param name="cameraId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<Object>> AutoPosConfigDebugLiveWithHttpInfoAsync(int jobTemplateId, int layoutId, string scannerId, string cameraId, float? threshold = default(float?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scannerId' is set
            if (scannerId == null)
                throw new Aida.Sdk.Client.ApiException(400, "Missing required parameter 'scannerId' when calling AutoPosApi->AutoPosConfigDebugLive");

            // verify the required parameter 'cameraId' is set
            if (cameraId == null)
                throw new Aida.Sdk.Client.ApiException(400, "Missing required parameter 'cameraId' when calling AutoPosApi->AutoPosConfigDebugLive");


            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("jobTemplateId", Aida.Sdk.Client.ClientUtils.ParameterToString(jobTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("layoutId", Aida.Sdk.Client.ClientUtils.ParameterToString(layoutId)); // path parameter
            localVarRequestOptions.PathParameters.Add("scannerId", Aida.Sdk.Client.ClientUtils.ParameterToString(scannerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cameraId", Aida.Sdk.Client.ClientUtils.ParameterToString(cameraId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aida/v1/autopos/job/{jobTemplateId}/layout/{layoutId}/scanner/{scannerId}/debug/live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPosConfigDebugLive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        public void AutoPosDebug(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            AutoPosDebugWithHttpInfo(id, threshold, scannerId, cameraId);
        }

        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Client.ApiResponse<Object> AutoPosDebugWithHttpInfo(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aida/v1/autopos/{id}/debug.jpg", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPosDebug", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoPosDebugAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AutoPosDebugWithHttpInfoAsync(id, threshold, scannerId, cameraId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Draws search area and best match rectangles on a camera frame and returns it as a jpeg image 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<Object>> AutoPosDebugWithHttpInfoAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aida/v1/autopos/{id}/debug.jpg", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPosDebug", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        public void AutoPosDebugLive(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            AutoPosDebugLiveWithHttpInfo(id, threshold, scannerId, cameraId);
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Client.ApiResponse<Object> AutoPosDebugLiveWithHttpInfo(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aida/v1/autopos/{id}/debug/live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPosDebugLive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoPosDebugLiveAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AutoPosDebugLiveWithHttpInfoAsync(id, threshold, scannerId, cameraId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Motion JPEG stream of the camera with XY Auto-Pos overlay 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<Object>> AutoPosDebugLiveWithHttpInfoAsync(int id, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aida/v1/autopos/{id}/debug/live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPosDebugLive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        public TemplateMatchingConfigurationDto CreateTemplateMatchingConfiguration(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto))
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = CreateTemplateMatchingConfigurationWithHttpInfo(scannerId, templateMatchingConfigurationDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        public Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> CreateTemplateMatchingConfigurationWithHttpInfo(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = templateMatchingConfigurationDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemplateMatchingConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        public async System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> CreateTemplateMatchingConfigurationAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = await CreateTemplateMatchingConfigurationWithHttpInfoAsync(scannerId, templateMatchingConfigurationDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto>> CreateTemplateMatchingConfigurationWithHttpInfoAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = templateMatchingConfigurationDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTemplateMatchingConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <returns>JobTemplateLayoutAutoPosSettingsDto</returns>
        public JobTemplateLayoutAutoPosSettingsDto DeleteJobTemplateLayoutAutoPosSettings(int autoPosSettingsId)
        {
            Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> localVarResponse = DeleteJobTemplateLayoutAutoPosSettingsWithHttpInfo(autoPosSettingsId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <returns>ApiResponse of JobTemplateLayoutAutoPosSettingsDto</returns>
        public Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> DeleteJobTemplateLayoutAutoPosSettingsWithHttpInfo(int autoPosSettingsId)
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("autoPosSettingsId", Aida.Sdk.Client.ClientUtils.ParameterToString(autoPosSettingsId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<JobTemplateLayoutAutoPosSettingsDto>("/aida/v1/autopos/{autoPosSettingsId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJobTemplateLayoutAutoPosSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateLayoutAutoPosSettingsDto</returns>
        public async System.Threading.Tasks.Task<JobTemplateLayoutAutoPosSettingsDto> DeleteJobTemplateLayoutAutoPosSettingsAsync(int autoPosSettingsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> localVarResponse = await DeleteJobTemplateLayoutAutoPosSettingsWithHttpInfoAsync(autoPosSettingsId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateLayoutAutoPosSettingsDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto>> DeleteJobTemplateLayoutAutoPosSettingsWithHttpInfoAsync(int autoPosSettingsId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("autoPosSettingsId", Aida.Sdk.Client.ClientUtils.ParameterToString(autoPosSettingsId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JobTemplateLayoutAutoPosSettingsDto>("/aida/v1/autopos/{autoPosSettingsId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJobTemplateLayoutAutoPosSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        public TemplateMatchingConfigurationDto DeleteTemplateMatchingConfiguration(int id)
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = DeleteTemplateMatchingConfigurationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        public Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> DeleteTemplateMatchingConfigurationWithHttpInfo(int id)
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplateMatchingConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        public async System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> DeleteTemplateMatchingConfigurationAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = await DeleteTemplateMatchingConfigurationWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto>> DeleteTemplateMatchingConfigurationWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTemplateMatchingConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>SearchTemplateMatchingConfigurationsResultDto</returns>
        public SearchTemplateMatchingConfigurationsResultDto FindTemplateMatchingConfigurations(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Client.ApiResponse<SearchTemplateMatchingConfigurationsResultDto> localVarResponse = FindTemplateMatchingConfigurationsWithHttpInfo(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of SearchTemplateMatchingConfigurationsResultDto</returns>
        public Aida.Sdk.Client.ApiResponse<SearchTemplateMatchingConfigurationsResultDto> FindTemplateMatchingConfigurationsWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchTemplateMatchingConfigurationsResultDto>("/aida/v1/autopos/template-matching-configuration/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindTemplateMatchingConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchTemplateMatchingConfigurationsResultDto</returns>
        public async System.Threading.Tasks.Task<SearchTemplateMatchingConfigurationsResultDto> FindTemplateMatchingConfigurationsAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<SearchTemplateMatchingConfigurationsResultDto> localVarResponse = await FindTemplateMatchingConfigurationsWithHttpInfoAsync(page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchTemplateMatchingConfigurationsResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<SearchTemplateMatchingConfigurationsResultDto>> FindTemplateMatchingConfigurationsWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchTemplateMatchingConfigurationsResultDto>("/aida/v1/autopos/template-matching-configuration/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindTemplateMatchingConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>AutoPosResultDto</returns>
        public AutoPosResultDto GetOffset(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            Aida.Sdk.Client.ApiResponse<AutoPosResultDto> localVarResponse = GetOffsetWithHttpInfo(autoPosSettingsId, threshold, scannerId, cameraId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of AutoPosResultDto</returns>
        public Aida.Sdk.Client.ApiResponse<AutoPosResultDto> GetOffsetWithHttpInfo(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("autoPosSettingsId", Aida.Sdk.Client.ClientUtils.ParameterToString(autoPosSettingsId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AutoPosResultDto>("/aida/v1/autopos/{autoPosSettingsId}/execute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOffset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutoPosResultDto</returns>
        public async System.Threading.Tasks.Task<AutoPosResultDto> GetOffsetAsync(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<AutoPosResultDto> localVarResponse = await GetOffsetWithHttpInfoAsync(autoPosSettingsId, threshold, scannerId, cameraId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run template matching and return the distance between the reference template and  the matched template (if any) in millimeters 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autoPosSettingsId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutoPosResultDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<AutoPosResultDto>> GetOffsetWithHttpInfoAsync(int autoPosSettingsId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("autoPosSettingsId", Aida.Sdk.Client.ClientUtils.ParameterToString(autoPosSettingsId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AutoPosResultDto>("/aida/v1/autopos/{autoPosSettingsId}/execute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOffset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        public TemplateMatchingConfigurationDto GetTemplateMatchingConfigurationById(int id)
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = GetTemplateMatchingConfigurationByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        public Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> GetTemplateMatchingConfigurationByIdWithHttpInfo(int id)
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateMatchingConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        public async System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> GetTemplateMatchingConfigurationByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = await GetTemplateMatchingConfigurationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto>> GetTemplateMatchingConfigurationByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Aida.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplateMatchingConfigurationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        public void TemplateMatchingConfigurationDebugLivePage(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            TemplateMatchingConfigurationDebugLivePageWithHttpInfo(templateMatchingConfigurationId, threshold, scannerId, cameraId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Client.ApiResponse<Object> TemplateMatchingConfigurationDebugLivePageWithHttpInfo(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("templateMatchingConfigurationId", Aida.Sdk.Client.ClientUtils.ParameterToString(templateMatchingConfigurationId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aida/v1/autopos/template-matching-configuration/{templateMatchingConfigurationId}/debug/live.html", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateMatchingConfigurationDebugLivePage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplateMatchingConfigurationDebugLivePageAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TemplateMatchingConfigurationDebugLivePageWithHttpInfoAsync(templateMatchingConfigurationId, threshold, scannerId, cameraId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<Object>> TemplateMatchingConfigurationDebugLivePageWithHttpInfoAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("templateMatchingConfigurationId", Aida.Sdk.Client.ClientUtils.ParameterToString(templateMatchingConfigurationId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aida/v1/autopos/template-matching-configuration/{templateMatchingConfigurationId}/debug/live.html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateMatchingConfigurationDebugLivePage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns></returns>
        public void TemplateMatchingDebugLive(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            TemplateMatchingDebugLiveWithHttpInfo(templateMatchingConfigurationId, threshold, scannerId, cameraId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Aida.Sdk.Client.ApiResponse<Object> TemplateMatchingDebugLiveWithHttpInfo(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("templateMatchingConfigurationId", Aida.Sdk.Client.ClientUtils.ParameterToString(templateMatchingConfigurationId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aida/v1/autopos/template-matching-configuration/{templateMatchingConfigurationId}/debug/live", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateMatchingDebugLive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplateMatchingDebugLiveAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TemplateMatchingDebugLiveWithHttpInfoAsync(templateMatchingConfigurationId, threshold, scannerId, cameraId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateMatchingConfigurationId"></param>
        /// <param name="threshold"> (optional, default to 0.8F)</param>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cameraId"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<Object>> TemplateMatchingDebugLiveWithHttpInfoAsync(int templateMatchingConfigurationId, float? threshold = default(float?), string scannerId = default(string), string cameraId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("templateMatchingConfigurationId", Aida.Sdk.Client.ClientUtils.ParameterToString(templateMatchingConfigurationId)); // path parameter
            if (threshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "threshold", threshold));
            }
            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            if (cameraId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cameraId", cameraId));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aida/v1/autopos/template-matching-configuration/{templateMatchingConfigurationId}/debug/live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TemplateMatchingDebugLive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <returns>JobTemplateLayoutAutoPosSettingsDto</returns>
        public JobTemplateLayoutAutoPosSettingsDto UpdateAutoPosSettings(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings))
        {
            Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> localVarResponse = UpdateAutoPosSettingsWithHttpInfo(scannerId, jobTemplateLayoutAutoPosSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <returns>ApiResponse of JobTemplateLayoutAutoPosSettingsDto</returns>
        public Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> UpdateAutoPosSettingsWithHttpInfo(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = jobTemplateLayoutAutoPosSettings;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<JobTemplateLayoutAutoPosSettingsDto>("/aida/v1/autopos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAutoPosSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobTemplateLayoutAutoPosSettingsDto</returns>
        public async System.Threading.Tasks.Task<JobTemplateLayoutAutoPosSettingsDto> UpdateAutoPosSettingsAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto> localVarResponse = await UpdateAutoPosSettingsWithHttpInfoAsync(scannerId, jobTemplateLayoutAutoPosSettings, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="jobTemplateLayoutAutoPosSettings"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobTemplateLayoutAutoPosSettingsDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<JobTemplateLayoutAutoPosSettingsDto>> UpdateAutoPosSettingsWithHttpInfoAsync(string scannerId = default(string), JobTemplateLayoutAutoPosSettings jobTemplateLayoutAutoPosSettings = default(JobTemplateLayoutAutoPosSettings), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = jobTemplateLayoutAutoPosSettings;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<JobTemplateLayoutAutoPosSettingsDto>("/aida/v1/autopos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAutoPosSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>TemplateMatchingConfigurationDto</returns>
        public TemplateMatchingConfigurationDto UpdateTemplateMatchingConfiguration(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto))
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = UpdateTemplateMatchingConfigurationWithHttpInfo(scannerId, templateMatchingConfigurationDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <returns>ApiResponse of TemplateMatchingConfigurationDto</returns>
        public Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> UpdateTemplateMatchingConfigurationWithHttpInfo(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = templateMatchingConfigurationDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplateMatchingConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TemplateMatchingConfigurationDto</returns>
        public async System.Threading.Tasks.Task<TemplateMatchingConfigurationDto> UpdateTemplateMatchingConfigurationAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto> localVarResponse = await UpdateTemplateMatchingConfigurationWithHttpInfoAsync(scannerId, templateMatchingConfigurationDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scannerId"> (optional, default to &quot;&quot;)</param>
        /// <param name="templateMatchingConfigurationDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TemplateMatchingConfigurationDto)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<TemplateMatchingConfigurationDto>> UpdateTemplateMatchingConfigurationWithHttpInfoAsync(string scannerId = default(string), TemplateMatchingConfigurationDto templateMatchingConfigurationDto = default(TemplateMatchingConfigurationDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scannerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scannerId", scannerId));
            }
            localVarRequestOptions.Data = templateMatchingConfigurationDto;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TemplateMatchingConfigurationDto>("/aida/v1/autopos/template-matching-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplateMatchingConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
