/*
 * aida
 *
 * 1.0.366
 *
 * The version of the OpenAPI document: 1.0.366
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Aida.Sdk.Client;
using Aida.Sdk.Model;

namespace Aida.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>List&lt;JobTemplateAuditEntryDto&gt;</returns>
        List<JobTemplateAuditEntryDto> GetJobTemplateAudit(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobTemplateAuditEntryDto&gt;</returns>
        ApiResponse<List<JobTemplateAuditEntryDto>> GetJobTemplateAuditWithHttpInfo(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>List&lt;WorkflowAuditEntryDto&gt;</returns>
        List<WorkflowAuditEntryDto> GetWorkflowAudit(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkflowAuditEntryDto&gt;</returns>
        ApiResponse<List<WorkflowAuditEntryDto>> GetWorkflowAuditWithHttpInfo(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobTemplateAuditEntryDto&gt;</returns>
        System.Threading.Tasks.Task<List<JobTemplateAuditEntryDto>> GetJobTemplateAuditAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobTemplateAuditEntryDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobTemplateAuditEntryDto>>> GetJobTemplateAuditWithHttpInfoAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowAuditEntryDto&gt;</returns>
        System.Threading.Tasks.Task<List<WorkflowAuditEntryDto>> GetWorkflowAuditAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowAuditEntryDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkflowAuditEntryDto>>> GetWorkflowAuditWithHttpInfoAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApi : IAuditApiSync, IAuditApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditApi : IDisposable, IAuditApi
    {
        private Aida.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuditApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuditApi(string basePath)
        {
            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                new Aida.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuditApi(Aida.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuditApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuditApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                new Aida.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuditApi(HttpClient client, Aida.Sdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Aida.Sdk.Client.Configuration.MergeConfigurations(
                Aida.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Aida.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuditApi(Aida.Sdk.Client.ISynchronousClient client, Aida.Sdk.Client.IAsynchronousClient asyncClient, Aida.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Aida.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Aida.Sdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Aida.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Aida.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Aida.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Aida.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>List&lt;JobTemplateAuditEntryDto&gt;</returns>
        public List<JobTemplateAuditEntryDto> GetJobTemplateAudit(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Client.ApiResponse<List<JobTemplateAuditEntryDto>> localVarResponse = GetJobTemplateAuditWithHttpInfo(startTimeStamp, endTimeStamp, jobTemplateId, operation, layoutName, ocrName, autoposName, webhookName, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of List&lt;JobTemplateAuditEntryDto&gt;</returns>
        public Aida.Sdk.Client.ApiResponse<List<JobTemplateAuditEntryDto>> GetJobTemplateAuditWithHttpInfo(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "StartTimeStamp", startTimeStamp));
            }
            if (endTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "EndTimeStamp", endTimeStamp));
            }
            if (jobTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "JobTemplateId", jobTemplateId));
            }
            if (operation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "Operation", operation));
            }
            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "LayoutName", layoutName));
            }
            if (ocrName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "OcrName", ocrName));
            }
            if (autoposName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "AutoposName", autoposName));
            }
            if (webhookName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "WebhookName", webhookName));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JobTemplateAuditEntryDto>>("/aida/v1/audit/job-templates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobTemplateAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobTemplateAuditEntryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobTemplateAuditEntryDto>> GetJobTemplateAuditAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<List<JobTemplateAuditEntryDto>> localVarResponse = await GetJobTemplateAuditWithHttpInfoAsync(startTimeStamp, endTimeStamp, jobTemplateId, operation, layoutName, ocrName, autoposName, webhookName, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobTemplateAuditEntryDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<List<JobTemplateAuditEntryDto>>> GetJobTemplateAuditWithHttpInfoAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "StartTimeStamp", startTimeStamp));
            }
            if (endTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "EndTimeStamp", endTimeStamp));
            }
            if (jobTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "JobTemplateId", jobTemplateId));
            }
            if (operation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "Operation", operation));
            }
            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "LayoutName", layoutName));
            }
            if (ocrName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "OcrName", ocrName));
            }
            if (autoposName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "AutoposName", autoposName));
            }
            if (webhookName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "WebhookName", webhookName));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JobTemplateAuditEntryDto>>("/aida/v1/audit/job-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobTemplateAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>List&lt;WorkflowAuditEntryDto&gt;</returns>
        public List<WorkflowAuditEntryDto> GetWorkflowAudit(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Client.ApiResponse<List<WorkflowAuditEntryDto>> localVarResponse = GetWorkflowAuditWithHttpInfo(startTimeStamp, endTimeStamp, jobTemplateId, workflowId, recordId, sessionId, operation, layoutName, ocrName, autoposName, webhookName, sourcePosition, position, success, result, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkflowAuditEntryDto&gt;</returns>
        public Aida.Sdk.Client.ApiResponse<List<WorkflowAuditEntryDto>> GetWorkflowAuditWithHttpInfo(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?))
        {
            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "StartTimeStamp", startTimeStamp));
            }
            if (endTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "EndTimeStamp", endTimeStamp));
            }
            if (jobTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "JobTemplateId", jobTemplateId));
            }
            if (workflowId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "WorkflowId", workflowId));
            }
            if (recordId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "RecordId", recordId));
            }
            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (operation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "Operation", operation));
            }
            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "LayoutName", layoutName));
            }
            if (ocrName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "OcrName", ocrName));
            }
            if (autoposName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "AutoposName", autoposName));
            }
            if (webhookName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "WebhookName", webhookName));
            }
            if (sourcePosition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SourcePosition", sourcePosition));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Position", position));
            }
            if (success != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Success", success));
            }
            if (result != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Result", result));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkflowAuditEntryDto>>("/aida/v1/audit/workflows", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkflowAuditEntryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkflowAuditEntryDto>> GetWorkflowAuditAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Aida.Sdk.Client.ApiResponse<List<WorkflowAuditEntryDto>> localVarResponse = await GetWorkflowAuditWithHttpInfoAsync(startTimeStamp, endTimeStamp, jobTemplateId, workflowId, recordId, sessionId, operation, layoutName, ocrName, autoposName, webhookName, sourcePosition, position, success, result, page, pageSize, query, sortCriteriaPropertyName, sortCriteriaDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Aida.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeStamp"> (optional)</param>
        /// <param name="endTimeStamp"> (optional)</param>
        /// <param name="jobTemplateId"> (optional)</param>
        /// <param name="workflowId"> (optional)</param>
        /// <param name="recordId"> (optional)</param>
        /// <param name="sessionId"> (optional)</param>
        /// <param name="operation"> (optional)</param>
        /// <param name="layoutName"> (optional)</param>
        /// <param name="ocrName"> (optional)</param>
        /// <param name="autoposName"> (optional)</param>
        /// <param name="webhookName"> (optional)</param>
        /// <param name="sourcePosition"> (optional)</param>
        /// <param name="position"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="result"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="sortCriteriaPropertyName"> (optional)</param>
        /// <param name="sortCriteriaDirection"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkflowAuditEntryDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Aida.Sdk.Client.ApiResponse<List<WorkflowAuditEntryDto>>> GetWorkflowAuditWithHttpInfoAsync(DateTime? startTimeStamp = default(DateTime?), DateTime? endTimeStamp = default(DateTime?), int? jobTemplateId = default(int?), string workflowId = default(string), int? recordId = default(int?), string sessionId = default(string), List<string> operation = default(List<string>), string layoutName = default(string), string ocrName = default(string), string autoposName = default(string), string webhookName = default(string), string sourcePosition = default(string), string position = default(string), bool? success = default(bool?), string result = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), string sortCriteriaPropertyName = default(string), SortDirection? sortCriteriaDirection = default(SortDirection?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Aida.Sdk.Client.RequestOptions localVarRequestOptions = new Aida.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Aida.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Aida.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "StartTimeStamp", startTimeStamp));
            }
            if (endTimeStamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "EndTimeStamp", endTimeStamp));
            }
            if (jobTemplateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "JobTemplateId", jobTemplateId));
            }
            if (workflowId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "WorkflowId", workflowId));
            }
            if (recordId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "RecordId", recordId));
            }
            if (sessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SessionId", sessionId));
            }
            if (operation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "Operation", operation));
            }
            if (layoutName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "LayoutName", layoutName));
            }
            if (ocrName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "OcrName", ocrName));
            }
            if (autoposName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "AutoposName", autoposName));
            }
            if (webhookName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "WebhookName", webhookName));
            }
            if (sourcePosition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SourcePosition", sourcePosition));
            }
            if (position != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Position", position));
            }
            if (success != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Success", success));
            }
            if (result != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Result", result));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "Query", query));
            }
            if (sortCriteriaPropertyName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.PropertyName", sortCriteriaPropertyName));
            }
            if (sortCriteriaDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Aida.Sdk.Client.ClientUtils.ParameterToMultiMap("", "SortCriteria.Direction", sortCriteriaDirection));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkflowAuditEntryDto>>("/aida/v1/audit/workflows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkflowAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
